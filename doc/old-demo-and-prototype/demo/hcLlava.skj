;;;;
;;;; Created       : 1999 Jun 10 (Thu) 20:56:18 by Harold Carr.
;;;; Last Modified : 1999 Jun 16 (Wed) 21:48:55 by Harold Carr.
;;;;

;;;;
;;;; Parser.
;;;;

(defmacro hcSkijMakePredicate (name test)
  `(defun ,name (item)
     (and (consp item)
	  (member (first item) '(,test /** /* //)))))

(defmacro hcSkijPopStream ()
  `(progn
     (setq stream (rest stream))
     (setq item   (first stream))))

(defmacro hcSkijMakeParseItem (name predicate)
  `(defun ,name (stream)
     (let ((result '())
	   (item (first stream)))
       (while (,predicate item)
	 (setq result (cons item result))
	 (hcSkijPopStream))
       (values (reverse result) stream))))

(hcSkijMakePredicate hcSkijCommentP    //) ; finds all comment forms
(hcSkijMakePredicate hcSkijPackageP    package)
(hcSkijMakePredicate hcSkijImportP     import)
(hcSkijMakePredicate hcSkijImplementsP implements)
(hcSkijMakePredicate hcSkijExtendsP    extends)
(hcSkijMakePredicate hcSkijThrowsP     throws)

(hcSkijMakeParseItem hcSkijParsePackage hcSkijPackageP)
(hcSkijMakeParseItem hcSkijParseImport  hcSkijImportP)

(defmacro hcSkijGetImplementsOrExtends (implementsOrExtends)
  `(progn
     (setq ,implementsOrExtends (first stream))
     (setq stream (rest stream))))

(defun hcSkijParseClassHeader (stream)
  (let ((name       '())
	(implements '())
	(extends    '()))
    (if (or (not (eq (first  stream) 'public))
	    (not (eq (second stream) 'class)))
	(error "Expecting public class, got: %s %s" 
	       (first stream) (second stream)))
    (setq name (third stream))
    (setq stream (rest (rest (rest stream))))
    (cond ((hcSkijImplementsP (first stream))
	   (hcSkijGetImplementsOrExtends implements)
	   (cond ((hcSkijExtendsP (first stream))
		  (hcSkijGetImplementsOrExtends extends))))
	  ((hcSkijExtendsP (first stream))
	   (hcSkijGetImplementsOrExtends extends)
	   (cond ((hcSkijImplementsP (first stream))
		  (hcSkijGetImplementsOrExtends implements)))))
    (values (list name implements extends) stream)))

(defun hcSkijParseClassMembers (publicClassName stream)
  (hcSkijParseClassMember publicClassName '() (first stream) (rest stream)))

(defun hcSkijParseClassMember (publicClassName accumulator stream remaining)
  (let ((visibility "")
	(static     "")
	(returnType '())
	(name       '())
	(args       '())
	(throws     '())
	(body       '())
	(result     '())
	(item       (car stream)))
    (cond ((hcSkijCommentP stream)
	   (setq result stream))
	  (t
	   (cond ((member item '(public protected private))
		  (setq visibility item)
		  (hcSkijPopStream)))
	   (cond ((eq item 'static)
		  (setq static item)
		  (hcSkijPopStream)))
	   (cond ((symbolp item)
		  (setq returnType item)
		  (hcSkijPopStream)
		  (let ((tmp (hcSkijParseNameAndParams item)))
		    (setq name (first tmp))
		    (setq args (second tmp))
		    (hcSkijPopStream)))
		 ((and (consp item)
		       (eq (car item) publicClassName))
		  ;; A Constructor.
		  (let ((tmp (hcSkijParseNameAndParams item)))
		    (setq name (first tmp))
		    (setq args (second tmp))
		    (hcSkijPopStream)))
		 (t
		  (error "Expecting name and parameters, got: %s" item)))
	   (cond ((hcSkijThrowsP item)
		  (setq throws item)
		  (hcSkijPopStream)))
	   (setq body stream)
	   (setq result
		 `(,visibility ,static ,returnType ,name ,args ,throws ,body))))
    (setq accumulator (cons result accumulator))
    (cond ((null remaining)
	   (reverse accumulator))
	  (t
	   (hcSkijParseClassMember publicClassName
				   accumulator
				   (first remaining)
				   (rest remaining))))))

(defun hcSkijParseNameAndParams (item)
  (values (first item) (rest item)))

(defun hcSkijParse (def)
  (let* ((tmp1 (hcSkijParsePackage def))
	 (package (first tmp1))
	 (tmp2 (hcSkijParseImport (second tmp1)))
	 (import (first tmp2))
	 ;; NB. first to get inside the class and make a new stream.
	 (tmp3 (hcSkijParseClassHeader (first (second tmp2))))
	 (classHeader (first tmp3))
	 (members (hcSkijParseClassMembers (first classHeader) (second tmp3))))
    `((package     ,package)
      (import      ,import)
      (classHeader ,classHeader)
      (members     ,members))))

;;;;
;;;; Java file generator.
;;;;

(defun hcSkijGenerateComment (comment javaBuffer skijBuffer)
  (let* ((commentType (car comment))
	 (subsequent  (if (member commentType '(/** /*)) '* '//))
	 (end         (if (member commentType '(/** /*)) '*/ '//))
	 (needsSpaceP (if (member commentType '(/** /*)) t nil)))
    (hcSkijTerpri javaBuffer)
    (hcSkijTerpri javaBuffer)
    (hcSkijPrinc commentType javaBuffer)
    (setq comment (cdr comment))
    (while comment
      (hcSkijTerpri javaBuffer)
      (if needsSpaceP (hcSkijPrinc " " javaBuffer))
      (hcSkijPrinc (format "%s %s" subsequent (car comment)) javaBuffer)
      (setq comment (cdr comment)))
    (hcSkijTerpri javaBuffer)
    (if needsSpaceP (hcSkijPrinc " " javaBuffer))
    (hcSkijPrinc end javaBuffer)
    (hcSkijTerpri javaBuffer)))

(defun hcSkijGeneratePackage (parsed javaBuffer skijBuffer)
  (let ((package (hcSkijSelect 'package parsed)))
    (while package
      (cond ((hcSkijCommentP (car package))
	     (hcSkijGenerateComment (car package) javaBuffer skijBuffer))
	    (t
	     (hcSkijTerpri javaBuffer)
	     (hcSkijPrinc (format "%s %s;"
			    (first (car package))
			    (second (car package)))
			  javaBuffer)))
      (setq package (cdr package)))))

(defun hcSkijGenerateImport (parsed javaBuffer skijBuffer)
  (hcSkijTerpri javaBuffer)
  (hcSkijTerpri javaBuffer)
  (hcSkijPrinc "// Start of imports needed by framework." javaBuffer)
  (hcSkijTerpri javaBuffer)
  (hcSkijPrinc "import com.ibm.jikes.skij.Cons;" javaBuffer)
  (hcSkijTerpri javaBuffer)
  (hcSkijPrinc "import com.ibm.jikes.skij.Scheme;" javaBuffer)
  (hcSkijTerpri javaBuffer)
  (hcSkijPrinc "import com.ibm.jikes.skij.SchemeException;" javaBuffer)
  (hcSkijTerpri javaBuffer)
  (hcSkijPrinc "// End of imports needed by framework." javaBuffer)
  (hcSkijTerpri javaBuffer)
  (let ((import (hcSkijSelect 'import parsed)))
    (while import
      (cond ((hcSkijCommentP (car import))
	     (hcSkijGenerateComment (car import) javaBuffer skijBuffer))
	    (t
	     (hcSkijTerpri javaBuffer)
	     (hcSkijPrinc (format "%s %s;"
			    (first (car import))
			    (second (car import)))
			  javaBuffer)))
      (setq import (cdr import)))))

(defun hcSkijGenerateClassHeader (parsed javaBuffer skijBuffer)
  (let ((classHeader (hcSkijSelect 'classHeader parsed)))
    (hcSkijTerpri javaBuffer)
    (hcSkijTerpri javaBuffer)
    (hcSkijPrinc (format "public class %s" (first classHeader))
		 javaBuffer)
    (hcSkijPrintContents (second classHeader)
			 #'(lambda () (hcSkijTerpri javaBuffer))
			 #'(lambda () nil)
			 javaBuffer)
    (hcSkijPrintContents (third classHeader)
			 #'(lambda () (hcSkijTerpri javaBuffer))
			 #'(lambda () nil)
			 javaBuffer)
    (hcSkijTerpri javaBuffer)
    (hcSkijPrinc "{" javaBuffer)))

(defun hcSkijGenerateMembers (parsed javaBuffer skijBuffer)
  (let ((members (hcSkijSelect 'members parsed)))
    (while members
      (cond ((hcSkijCommentP (car members))
	     (hcSkijGenerateComment (car members) javaBuffer skijBuffer))
	    (t
	     (hcSkijGenerateMember (car members) javaBuffer skijBuffer)))
      (setq members (cdr members)))))

(defun hcSkijGenerateMember (member javaBuffer skijBuffer)
  (hcSkijTerpri javaBuffer)
  (hcSkijPrinc
   (format "%s %s %s %s" 
	   (first member) 
	   (second member)
	   (if (third member)
	       (third member)
	     "") 
	   (fourth member))
   javaBuffer)
  (hcSkijGenerateParameters (fifth member) javaBuffer)
  (cond ((sixth member)
	 (hcSkijTerpri javaBuffer)
	 (hcSkijPrinc "throws" javaBuffer)
	 (hcSkijPrintContents (cdr (sixth member))
			      #'(lambda () (hcSkijTerpri javaBuffer))
			      #'(lambda () nil)
			      javaBuffer)))
  (hcSkijTerpri javaBuffer)
  (hcSkijPrinc "{" javaBuffer)
  (hcSkijGenerateBody member javaBuffer skijBuffer)
  (hcSkijTerpri javaBuffer)
  (hcSkijPrinc "}" javaBuffer))

(defun hcSkijMakeParameterString (params withTypesP)
  (let ((result ""))
    (while params
      (setq result
	    (concat result
		    (if withTypesP
			(format "%s %s"
				(first (first params)) (second (first params)))
		      (format "%s" (second (first params))))))
      (setq params (rest params))
      (if params
	  (setq result (concat result ", "))))
    result))

(defun hcSkijGenerateParameters (params javaBuffer)
  (hcSkijPrinc "(" javaBuffer)
  (hcSkijPrinc (hcSkijMakeParameterString params t) javaBuffer)
  (hcSkijPrinc ")" javaBuffer))

(defun hcSkijGenerateBody (member javaBuffer skijBuffer)
  (hcSkijTerpri javaBuffer)
  (hcSkijPrinc "return" javaBuffer)
  (hcSkijTerpri javaBuffer)
  (cond ((third member)
	 (hcSkijPrinc (format "(%s) " (third member)) javaBuffer)
	 (hcSkijTerpri javaBuffer)))
  (hcSkijPrinc (format "Scheme.procedure(\"%sImpl\").apply(Cons.list(this%s %s));"
		 (fourth member)
		 (if (fifth member) "," "")
		 (hcSkijMakeParameterString (fifth member) nil))
	       javaBuffer))

(defun hcSkijGenerateCloseClass (parsed javaBuffer skijBuffer)
  (hcSkijTerpri javaBuffer)
  (hcSkijPrinc "}" javaBuffer)
  (hcSkijTerpri javaBuffer)
  (hcSkijTerpri javaBuffer)
  (hcSkijPrinc "// End of file." javaBuffer)
  (hcSkijTerpri javaBuffer))

;;;;
;;;; Skij file generator.
;;;;

;;;;
;;;; Top level.
;;;;

(defmacro define-java-class (&rest def)
  `(define-java-class-e ',def))

(defun define-java-class-e (def)
  (let ((parsed (hcSkijParse def))
	(javaBuffer (get-buffer-create "j.java"))
	(skijBuffer (get-buffer-create "s")))
    (mapc #'(lambda (procedure)
	      (funcall procedure parsed javaBuffer skijBuffer))
	  '(hcSkijGeneratePackage
	    hcSkijGenerateImport
	    hcSkijGenerateClassHeader
	    hcSkijGenerateMembers
	    hcSkijGenerateCloseClass))
    (with-current-buffer javaBuffer
      (java-mode)
      (indent-region (point-min) (point-max) nil))))

;;;;
;;;; Utilities.
;;;;

(defmacro comment (&rest x) nil)

(defun rest (x) (cdr x))
(defun first (x) (car x))
(defun second (x) (cadr x))
(defun third (x) (caddr x))
(defun fourth (x) (car (cdddr x)))
(defun fifth (x) (cadr (cdddr x)))
(defun sixth (x) (car (cddr (cdddr x))))
(defun seventh (x) (cadr (cddr (cdddr x))))
(defun caddr (x) (cadr (cdr x)))
(defun cdddr (x) (cddr (cdr x)))
(defun values (&rest x) x)

(defun hcSkijSelect (this that)
  (cond ((null that) nil)
	((eq this (caar that)) (car (cdr (car that))))
	(t (hcSkijSelect this (cdr that)))))

(defun hcSkijPrintContents (contents beforeEachItem afterEachItem stream)
  (mapc #'(lambda (x) 
	    (funcall beforeEachItem)
	    (hcSkijPrinc x stream)
	    (funcall afterEachItem))
	contents))

(defun hcSkijTerpri (stream)
  (terpri stream))

(defun hcSkijPrinc (item stream)
  (princ item stream))

;;;;
;;;; Test
;;;;

(comment
(load-file "hcSkij.el")
(define-java-class
  (/** "Comment before package."
       "Each line in a string.")
  (package hc.util)
  (/* "Comment before import."
      "Another line.")
  (import com.ibm.jikes.skij.*)
  (import java.util.Hashtable)
  (// "Comment before class."
      "Another line.")
  (public class Baz (implements Foo)
	            (extends Wombat)
	  (/** "The constructor.")
	  (public (Baz) (System.out.println "YES"))
	  (/* "A static method.")
	  (public static Object
		  (bar (Object x) (Hashtable y))
		  (throws SchemeException Exception)
		  `(public static Object bar ,x))
	  (// "A virtual method")
	  (public Object 
		  (baz (Object x))
		  (throws SchemeException)
		  `(public Object baz ,x))))

(load-file "hcSkij.el")

(define-java-class
  (package hc.util)
  (public class FooImplGen (implements Foo)
	  (public String (bar (String x))
		  (throws SchemeException)
		  (whatever))))

)

;;; End of file.

