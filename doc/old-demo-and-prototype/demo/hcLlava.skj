;;;; Copyright (c) 1997 - 2004 Harold Carr
;;;;
;;;; This work is licensed under the Creative Commons Attribution License.
;;;; To view a copy of this license, visit 
;;;;   http://creativecommons.org/licenses/by/2.0/
;;;; or send a letter to
;;;;   Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA
;;;;---------------------------------------------------------------------------


;;;;
;;;; Created       : 1999 Jun 10 (Thu) 20:56:18 by Harold Carr.
;;;; Last Modified : 2004 Sep 03 (Fri) 15:44:05 by Harold Carr.
;;;;

;;;;
;;;; TODO
;;;;
;;;;

(hcRequire "util")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;; Parser.
;;;;

(defmacro (hcLlavaMakePredicate name test)
  `(define (,name item)
     (and (pair? item)
	  (member (first item) '(,test /** /* //)))))

(defmacro (hcLlavaPopStream )
  `(begin
     (set! stream (rest stream))
     (set! item   (first stream))
     item))

(defmacro (hcLlavaMakeParseItem name predicate)
  `(define (,name stream)
     (let ((result '())
	   (item (first stream)))
       (while (,predicate item)
	 (set! result (cons item result))
	 (hcLlavaPopStream))
       (values (reverse result) stream))))

(hcLlavaMakePredicate hcLlavaCommentP    //) ; finds all comment forms
(hcLlavaMakePredicate hcLlavaPackageP    package)
(hcLlavaMakePredicate hcLlavaImportP     import)
(hcLlavaMakePredicate hcLlavaImplementsP implements)
(hcLlavaMakePredicate hcLlavaExtendsP    extends)
(hcLlavaMakePredicate hcLlavaThrowsP     throws)

(hcLlavaMakeParseItem hcLlavaParsePackage hcLlavaPackageP)
(hcLlavaMakeParseItem hcLlavaParseImport  hcLlavaImportP)

(defmacro (hcLlavaGetImplementsOrExtends implementsOrExtends)
  `(begin
     ;; rest -> skip actual "implements" or "extends" symbol.
     (set! ,implementsOrExtends (rest (first stream))) 
     (set! stream (rest stream))))

(define (hcLlavaParseClassHeader stream)
  (let ((name       #f)
	(implements #f)
	(extends    #f))
    (if (or (not (eq? (first  stream) 'public))
	    (not (eq? (second stream) 'class)))
	(error (string-append "Expecting public class, got: "
			      (first stream) " " (second stream))))
    (setq name (third stream))
    (setq stream (rest (rest (rest stream))))
    (cond ((hcLlavaImplementsP (first stream))
	   (hcLlavaGetImplementsOrExtends implements)
	   (cond ((hcLlavaExtendsP (first stream))
		  (hcLlavaGetImplementsOrExtends extends))))
	  ((hcLlavaExtendsP (first stream))
	   (hcLlavaGetImplementsOrExtends extends)
	   (cond ((hcLlavaImplementsP (first stream))
		  (hcLlavaGetImplementsOrExtends implements)))))
    (values (hcLlavaMakeClassHeader
	     :name name :implements implements :extends extends)
	    stream)))

(define (hcLlavaParseClassMembers publicClassName stream)
  (hcLlavaParseClassMember publicClassName '() (first stream) (rest stream)))

(define (hcLlavaParseClassMember publicClassName accumulator stream remaining)
  (let ((visibility "")
	(static     "")
	(returnType #f)
	(name       #f)
	(args       '())
	(throws     '())
	(body       '())
	(result     '())
	(item       (car stream)))
    (cond ((hcLlavaCommentP stream)
	   (set! result stream))
	  (else
	   (cond ((member item '(public protected private))
		  (set! visibility item)
		  (hcLlavaPopStream)))
	   (cond ((eq? item 'static)
		  (set! static item)
		  (hcLlavaPopStream)))
	   (cond ((symbol? item)
		  (set! returnType item)
		  (hcLlavaPopStream)
		  (let ((tmp (hcLlavaParseNameAndParams item)))
		    (set! name (first tmp))
		    (set! args (second tmp))
		    (hcLlavaPopStream)))
		 ((and (pair? item)
		       (eq? (car item) publicClassName))
		  ;; A Constructor.
		  (let ((tmp (hcLlavaParseNameAndParams item)))
		    (set! name (first tmp))
		    (set! args (second tmp))
		    (hcLlavaPopStream)))
		 (else
		  (error (string-append "Expecting name and parameters, got: "
					item))))
	   (cond ((hcLlavaThrowsP item)
		  (set! throws (rest item)) ; skip "throws" symbol.
		  (hcLlavaPopStream)))
	   ;; Build in throwing of SchemeException.
	   (set! throws (append throws (list 'SchemeException)))
	   (set! body stream)
	   (set! result
		 (hcLlavaMakeClassMember
		  :visibility visibility 
		  :static static
		  :returnType returnType 
		  :name name 
		  :args args
		  :throws throws
		  :body body))))
    (set! accumulator (cons result accumulator))
    (cond ((null? remaining)
	   (reverse accumulator))
	  (else
	   (hcLlavaParseClassMember publicClassName
				   accumulator
				   (first remaining)
				   (rest remaining))))))

(define (hcLlavaParseNameAndParams item)
  (values (first item) (rest item)))

(define (hcLlavaParse def)
  (let* ((tmp1 (hcLlavaParsePackage def))
	 (package (first tmp1))
	 (tmp2 (hcLlavaParseImport (second tmp1)))
	 (import (first tmp2))
	 ;; NB. first to get inside the class and make a new stream.
	 (tmp3 (hcLlavaParseClassHeader (first (second tmp2))))
	 (classHeader (first tmp3))
	 (members (hcLlavaParseClassMembers 
		   (hcLlavaGetClassHeaderName classHeader) (second tmp3))))
    `((package     ,package)
      (import      ,import)
      (classHeader ,classHeader)
      (members     ,members))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;; Java and Skij file generators.
;;;;

(define (hcLlavaGenerateComment comment javaBuffer skijBuffer)
  (hcLlavaGenerateCommentJava comment javaBuffer)
  (hcLlavaGenerateCommentSkij comment skijBuffer))

(define (hcLlavaGenerateCommentJava comment javaBuffer)
  (let* ((commentType (car comment))
	 (subsequent  (if (member commentType '(/** /*)) '* '//))
	 (end         (if (member commentType '(/** /*)) '*/ '//))
	 (needsSpaceP (if (member commentType '(/** /*)) #t #f)))
    (hcLlavaTerpri javaBuffer)
    (hcLlavaTerpri javaBuffer)
    (hcLlavaPrinc commentType javaBuffer)
    (set! comment (cdr comment))
    (while (not (null? comment))
      (hcLlavaTerpri javaBuffer)
      (if needsSpaceP (hcLlavaPrinc " " javaBuffer))
      (hcLlavaPrinc (string-append subsequent " " (car comment)) javaBuffer)
      (set! comment (cdr comment)))
    (hcLlavaTerpri javaBuffer)
    (if needsSpaceP (hcLlavaPrinc " " javaBuffer))
    (hcLlavaPrinc end javaBuffer)
    (hcLlavaTerpri javaBuffer)))

(define (hcLlavaGenerateCommentSkij comment skijBuffer)
  (hcLlavaTerpri skijBuffer)
  (hcLlavaTerpri skijBuffer)
  (hcLlavaPrintContents comment 
		       (lambda () (hcLlavaPrinc ";;; " skijBuffer))
		       (lambda () (hcLlavaTerpri skijBuffer))
		       skijBuffer
		       #f))

(define (hcLlavaGeneratePackage parsed javaBuffer skijBuffer)
  (let ((package (hcLlavaSelect 'package parsed)))
    (hcLlavaGeneratePackageJava package javaBuffer)
    (hcLlavaGeneratePackageSkij package skijBuffer)))

(define (hcLlavaGeneratePackageJava package javaBuffer)
  (while (not (null? package))
    (cond ((hcLlavaCommentP (car package))
	   (hcLlavaGenerateCommentJava (car package) javaBuffer))
	  (else
	   (hcLlavaTerpri javaBuffer)
	   (hcLlavaPrinc (string-append "package " (second (car package)) ";")
			javaBuffer)))
    (set! package (cdr package))))

(define (hcLlavaGeneratePackageSkij package skijBuffer)
  (while (not (null? package))
    (cond ((hcLlavaCommentP (car package))
	   (hcLlavaGenerateCommentSkij (car package) skijBuffer))
	  (else
	   (hcLlavaTerpri skijBuffer)
	   (hcLlavaPrinc (string-append ";;; " (car package)) skijBuffer)))
    (set! package (cdr package))))

(define (hcLlavaGenerateImport parsed javaBuffer skijBuffer)
  (let ((import (hcLlavaSelect 'import parsed)))
    (hcLlavaGenerateImportJava import parsed javaBuffer)
    (hcLlavaGenerateImportSkij import parsed skijBuffer)))

(define (hcLlavaGenerateImportJava import parsed javaBuffer)
  (hcLlavaTerpri javaBuffer)
  (hcLlavaTerpri javaBuffer)
  (hcLlavaPrinc "// Start of imports needed by framework." javaBuffer)
  (hcLlavaTerpri javaBuffer)
  (hcLlavaPrinc "import com.ibm.jikes.skij.Cons;" javaBuffer)
  (hcLlavaTerpri javaBuffer)
  (hcLlavaPrinc "import com.ibm.jikes.skij.Scheme;" javaBuffer)
  (hcLlavaTerpri javaBuffer)
  (hcLlavaPrinc "import com.ibm.jikes.skij.SchemeException;" javaBuffer)
  (hcLlavaTerpri javaBuffer)
  (hcLlavaPrinc "// End of imports needed by framework." javaBuffer)
  (hcLlavaTerpri javaBuffer)
  (while (not (null? import))
    (cond ((hcLlavaCommentP (car import))
	   (hcLlavaGenerateCommentJava (car import) javaBuffer))
	  (else
	   (hcLlavaTerpri javaBuffer)
	   (hcLlavaPrinc (string-append "import " (second (car import)) ";")
			javaBuffer)))
    (set! import (cdr import))))

(define (hcLlavaGenerateImportSkij import parsed skijBuffer)
  (hcLlavaTerpri skijBuffer)
  (hcLlavaPrinc "(hcRequire \"importJava\")" skijBuffer)
  (hcLlavaTerpri skijBuffer)
  ;; Two selects skip comments inside of package parse node.
  (let ((package (hcLlavaSelect 'package (hcLlavaSelect 'package parsed)))
	(className (hcLlavaGetClassHeaderName
		    (hcLlavaSelect 'classHeader parsed))))
    (hcLlavaPrinc (string-append "(importJava \'" package "." className ")")
		 skijBuffer)
    (hcLlavaTerpri skijBuffer))
  (while (not (null? import))
    (cond ((hcLlavaCommentP (car import))
	   (hcLlavaGenerateCommentSkij (car import) skijBuffer))
	  (else
	   (hcLlavaTerpri skijBuffer)
	   (hcLlavaPrinc (string-append ";;; " (car import)) skijBuffer)))
    (set! import (cdr import))))

(define (hcLlavaGenerateClassHeader parsed javaBuffer skijBuffer)
  (let* ((classHeader (hcLlavaSelect 'classHeader parsed))
	 (name        (hcLlavaGetClassHeaderName       classHeader))
	 (implements  (hcLlavaGetClassHeaderImplements classHeader))
	 (extends     (hcLlavaGetClassHeaderExtends    classHeader)))
    (hcLlavaTerpri javaBuffer)
    (hcLlavaTerpri javaBuffer)
    (hcLlavaPrinc (string-append "public class " name) javaBuffer)
    (hcLlavaTerpri javaBuffer)
    (cond (extends
	   (hcLlavaPrinc "extends" javaBuffer)
	   (hcLlavaPrintContents extends
				(lambda () (hcLlavaTerpri javaBuffer))
				(lambda () #f)
				javaBuffer
				#t)
	   (hcLlavaTerpri javaBuffer)))
    (cond (implements
	   (hcLlavaPrinc "implements" javaBuffer)
	   (hcLlavaPrintContents implements
				(lambda () (hcLlavaTerpri javaBuffer))
				(lambda () #f)
				javaBuffer
				#t)
	   (hcLlavaTerpri javaBuffer)))
    (hcLlavaPrinc "{" javaBuffer)))

(define (hcLlavaGenerateMembers parsed javaBuffer skijBuffer)
  (let ((members (hcLlavaSelect 'members parsed)))
    (while (not (null? members))
      (cond ((hcLlavaCommentP (car members))
	     (hcLlavaGenerateComment (car members) javaBuffer skijBuffer))
	    (else
	     (hcLlavaGenerateMember (car members) parsed javaBuffer skijBuffer)))
      (set! members (cdr members)))))

(define (hcLlavaGenerateMember member parsed javaBuffer skijBuffer)
  (hcLlavaGenerateMemberJava member parsed javaBuffer)
  (hcLlavaGenerateMemberSkij member parsed skijBuffer))

(define (hcLlavaGenerateMemberJava member parsed javaBuffer)
  (hcLlavaTerpri javaBuffer)
  (hcLlavaPrinc
   (string-append
    (hcLlavaGetClassMemberVisibility member) " "
    (hcLlavaGetClassMemberStatic member) " "
    (let ((returnType (hcLlavaGetClassMemberReturnType member)))
      (if returnType returnType "")) " "
    (hcLlavaGetClassMemberName member))
   javaBuffer)
  (hcLlavaGenerateParametersJava (hcLlavaGetClassMemberArgs member) javaBuffer)
  (let ((throws (hcLlavaGetClassMemberThrows member)))
    (cond ((not (null? throws))
	   (hcLlavaTerpri javaBuffer)
	   (hcLlavaPrinc "throws" javaBuffer)
	   (hcLlavaPrintContents throws
				(lambda () (hcLlavaTerpri javaBuffer))
				(lambda () #f)
				javaBuffer
				#t))))
  (hcLlavaTerpri javaBuffer)
  (hcLlavaPrinc "{" javaBuffer)
  (hcLlavaGenerateBodyJava member parsed javaBuffer)
  (hcLlavaTerpri javaBuffer)
  (hcLlavaPrinc "}" javaBuffer))

(define (hcLlavaMakeProcNameSkij member parsed)
  ;; Two selects skip comments inside package parse node.
  (let ((package (hcLlavaSelect 'package (hcLlavaSelect 'package parsed)))
	(className 
	 (hcLlavaGetClassHeaderName (hcLlavaSelect 'classHeader parsed))))
    (string-append package
		   "."
		   className
		   "."
		   (symbol->string (hcLlavaGetClassMemberName member))
		   "Impl")))

(define (hcLlavaGenerateMemberSkij member parsed skijBuffer)
  (hcLlavaTerpri skijBuffer)
  (let ((procName (hcLlavaMakeProcNameSkij member parsed)))
    (hcLlavaPrinc (string-append
		  "(define (" 
		  procName 
		  " "
		  (if (hcLlavaNeedsThis? member) " this " "")
		  (hcLlavaMakeParameterString 
		   (hcLlavaGetClassMemberArgs member) #f #f)
		  ")")
		 skijBuffer))
  (let ((body (hcLlavaGetClassMemberBody member)))
    (while (not (null? body))
      (hcLlavaTerpri skijBuffer)
      (hcLlavaPrin1 (car body) skijBuffer)
      (setq body (cdr body))))
  (hcLlavaPrinc ")" skijBuffer))

(define (hcLlavaMakeParameterString params withTypesP withCommasP)
  (let ((result "")
	(param #f))
    (while (not (null? params))
      (set! param (first params))
      (set! result
	    (string-append
	     result
	     (if withTypesP
		 (string-append
		  (hcLlavaGetParameterType param) " " (hcLlavaGetParameterName param))
		 (hcLlavaGetParameterName param))))
      (set! params (rest params))
      (if (not (null? params))
	  (set! result (string-append result (if withCommasP ", " " ")))))
    result))

(define (hcLlavaGenerateParametersJava params javaBuffer)
  (hcLlavaPrinc "(" javaBuffer)
  (hcLlavaPrinc (hcLlavaMakeParameterString params #t #t) javaBuffer)
  (hcLlavaPrinc ")" javaBuffer))

(define (hcLlavaNeedsThis? member)
  (if (eq? (hcLlavaGetClassMemberStatic member) 'static)
      #f
      (if (hcLlavaGetClassMemberArgs member) #t #f)))

(define (hcLlavaGenerateBodyJava member parsed javaBuffer)
  (let ((returnType (hcLlavaGetClassMemberReturnType member))
	(name       (hcLlavaMakeProcNameSkij         member parsed))
	(args       (hcLlavaGetClassMemberArgs       member)))
    (hcLlavaTerpri javaBuffer)
    (cond ((and returnType
		(not (eq? returnType 'void)))
	   (hcLlavaPrinc "return" javaBuffer)
	   (hcLlavaTerpri javaBuffer)
	   (hcLlavaPrinc (string-append "(" returnType ") ") javaBuffer)
	   (hcLlavaTerpri javaBuffer)))
    (let* ((parms (hcLlavaMakeParameterString args #f #t))
	   (applyArgs (if (hcLlavaNeedsThis? member)
			  (if (null? args)
			      "Cons.list(this)"
			      (string-append "Cons.list(this, " parms ")"))
			  (if (null? args)
			      "Nil.nil"
			      (string-append "Cons.list(" parms ")")))))
      (hcLlavaPrinc 
       (string-append
	"Scheme.procedure(\"" name "\").apply(" applyArgs ");")
       javaBuffer))))

(define (hcLlavaGenerateCloseClass parsed javaBuffer skijBuffer)
  (hcLlavaGenerateCloseClassJava parsed javaBuffer)
  (hcLlavaGenerateCloseClassSkij parsed skijBuffer))

(define (hcLlavaGenerateCloseClassJava parsed javaBuffer)
  (hcLlavaTerpri javaBuffer)
  (hcLlavaPrinc "}" javaBuffer)
  (hcLlavaTerpri javaBuffer)
  (hcLlavaTerpri javaBuffer)
  (hcLlavaPrinc "// End of file." javaBuffer)
  (hcLlavaTerpri javaBuffer))

(define (hcLlavaGenerateCloseClassSkij parsed skijBuffer)
  (hcLlavaTerpri skijBuffer)
  (hcLlavaTerpri skijBuffer)
  (hcLlavaPrinc ";;; End of file." skijBuffer)
  (hcLlavaTerpri skijBuffer))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;; Top level.
;;;;

(defmacro (define-java-class . def)
  `(define-java-class-e ',def))

(define (define-java-class-e def)
  (let* ((parsed       (hcLlavaParse def))
	 (className    (symbol->string 
			(hcLlavaGetClassHeaderName
			 (hcLlavaSelect 'classHeader parsed))))
	 (javaFileName (string-append className ".java"))
	 (skijFileName (string-append className "Impl.skj"))
	 (javaBuffer   (open-output-file javaFileName))
	 (skijBuffer   (open-output-file skijFileName)))
    (for-each
     (lambda (procedure)
       (procedure parsed javaBuffer skijBuffer))
     `(,hcLlavaGeneratePackage
       ,hcLlavaGenerateImport
       ,hcLlavaGenerateClassHeader
       ,hcLlavaGenerateMembers
       ,hcLlavaGenerateCloseClass))
    (close-output-port javaBuffer)
    (close-output-port skijBuffer)
    #t))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;; Utilities.
;;;;

;;; Records

(define (hcLlavaCheckRecordType record type)
  (if (or (not (pair? record))
	  (not (eq? (car record) type)))
      (error (string-append "Incorrect type.  Expected: "
			    type
			    " got: "
			    record))))
(define (hcLlavaGetRecordSlot record slot)
  (let ((found (member slot record)))
    (if (not found)
	(error (string-append "Incorrect slot: " slot " for: " record)))
    (cadr found)))
(define (hcLlavaCheckGetRecordSlot type record slot)
  (hcLlavaCheckRecordType record type)
  (hcLlavaGetRecordSlot record slot))

;;; ClassHeader

(defineWithKeywords (hcLlavaMakeClassHeader name implements extends)
  (list 'ClassHeader
	:name name 
	:implements implements
	:extends extends))
(define (hcLlavaGetClassHeaderName record)
  (hcLlavaCheckGetRecordSlot 'ClassHeader record :name))
(define (hcLlavaGetClassHeaderImplements record)
  (hcLlavaCheckGetRecordSlot 'ClassHeader record :implements))
(define (hcLlavaGetClassHeaderExtends record)
  (hcLlavaCheckGetRecordSlot 'ClassHeader record :extends))

;;; ClassMember

(defineWithKeywords (hcLlavaMakeClassMember
		     visibility static returnType name args throws body)
  (list 'ClassMember 
	:visibility visibility 
	:static static
	:returnType returnType 
	:name name 
	:args args
	:throws throws
	:body body))
(define (hcLlavaGetClassMemberVisibility record)
  (hcLlavaCheckGetRecordSlot 'ClassMember record :visibility))
(define (hcLlavaGetClassMemberStatic record)
  (hcLlavaCheckGetRecordSlot 'ClassMember record :static))
(define (hcLlavaGetClassMemberReturnType record)
  (hcLlavaCheckGetRecordSlot 'ClassMember record :returnType))
(define (hcLlavaGetClassMemberName record)
  (hcLlavaCheckGetRecordSlot 'ClassMember record :name))
(define (hcLlavaGetClassMemberArgs record)
  (hcLlavaCheckGetRecordSlot 'ClassMember record :args))
(define (hcLlavaGetClassMemberThrows record)
  (hcLlavaCheckGetRecordSlot 'ClassMember record :throws))
(define (hcLlavaGetClassMemberBody record)
  (hcLlavaCheckGetRecordSlot 'ClassMember record :body))

;;; Parameters

(define (hcLlavaGetParameterType param)
  (first param))
(define (hcLlavaGetParameterName param)
  (second param))


(define (hcLlavaSelect this that)
  (cond ((null? that) '())
	((eq? this (caar that)) (car (cdr (car that))))
	(else (hcLlavaSelect this (cdr that)))))

(define (hcLlavaPrintContents 
	 contents beforeEachItem afterEachItem stream withCommas?)
  (while (not (null? contents))
    (let ((x (car contents)))
      (set! contents (cdr contents))
      (beforeEachItem)
      (hcLlavaPrinc x stream)
      (if (and withCommas?
	       (not (null? contents)))
	  (hcLlavaPrinc "," stream))
      (afterEachItem))))

(define (hcLlavaTerpri stream)
  (newline stream))

(define (hcLlavaPrinc item stream)
  (display item stream))

(define (hcLlavaPrin1 item stream)
  (write item stream))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;; Test
;;;;

(comment

(load "hcLlava.skj")

(define-java-class
  (package hc.llava)
  (public class FooImplGen (extends Foo)
	  (public String (bar (String x))
		  (string-append "it works!  "
				 (to-string this)
				 (to-string x)))))

;. ripEnvHc
gm

(define className 'nothing)
;(set! className 'hc.llava.FooImpl)
(set! className 'hc.llava.FooImplGen)
(define (tryFoo)
  (let ((foo (new className)))
    (bar foo " The Argument")))

;; Define by hand.
(hcRequire "importJava")
(importJava className)
(define (barImpl this x)
  (string-append "it works by hand!  " (to-string this) (to-string x)))

(tryFoo)

;; Define by gen.
(load "FooImplGenImpl.skj")
  
(tryFoo)


;;-----------

(load "hcLlava.skj")

(define-java-class
  (/** "Comment before package."
       "Each line in a string.")
  (package hc.llava)
  (/* "Comment before import."
      "Another line.")
  (import com.ibm.jikes.skij.*)
  (import java.util.Hashtable)
  (// "Comment before class."
      "Another line.")
  (public class Baz (implements Wombat)
	            (extends Foo)
	  (/** "Constructor with no args.")
	  (public (Baz) 
		  (print "Baz no arg constructor"))
	  ;(/** "Constructor with args.")
	  ;(public (Baz x)
	  ;        (print (list "Baz constructor with arg" x)))
	  (/* "Static method with no args.")
	  (public static void (barNo)
		  (print "barNo"))
	  (/* "Static method with args.")
	  (public static Object (barYes (Object x) (Hashtable y))
		  (let ((return (list 'public 'static 'Object 'barYes x)))
		    (print return)
		    return))
	  (// "Virtual method with no args.")
	  (public void (bazNo)
		  (print "bazNo"))
	  (// "Virtual method with args.")
	  (public Object (bazYes (Object x)) (throws SomeException)
		  `(public Object baz ,x))))

;. ripEnvHc
gm

(define (tryBaz)
  (let ((foo (new 'hc.llava.Baz)))
    (hc.llava.Baz.barNo)
    (hc.llava.Baz.barYes (new 'java.lang.Integer 1) (new 'java.util.Hashtable))
    (bazNo foo)
    (bazYes foo (new 'java.lang.Integer 2))))

(load "BazImpl.skj")
(tryBaz)

)

;;; End of file.

