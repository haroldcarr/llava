                           Terms and Conditions 
            
             LLAVA COPYRIGHT AND PERMISSION NOTICE Version 1.0

Copyright (c) 1997, 1998, 1999, 2000, 2001, 2002 Harold Carr
All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, and/or sell copies of the Software, and to permit persons
to whom the Software is furnished to do so, provided that the above
copyright notice(s) and this permission notice appear in all copies of
the Software and that both the above copyright notice(s) and this
permission notice appear in supporting documentation.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY
SPECIAL INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER
RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF
CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

Except as contained in this notice, the name of a copyright holder
shall not be used in advertising or otherwise to promote the sale, use
or other dealings in this Software without prior written authorization
of the copyright holder.

------------------------------------------------------------------------------


During the 80s I was involved in designing and building LISP systems
[cite*****].  When funding for LISP became scarce I switched to
distributed computing and ended up working for SUN Microsystems on
CORBA software [cite*****].  Then Java arrived.  At SUN, our group's
efforts in C++ were redirected towards Java.

Immediately, upon first using Java, I was struck by the fact that it
was fun to program again (vis-a-vis the tedious nature of programming
in C++).  It was clear that the reason for this joy was Java's higher
level ala LISP.  However, once I tasted that level again I was soon
disappointed by Java since it lacked many features of LISP which make
working at that level fun and productive.

Then Per Bothner released Kawa [cite*****], a version of Scheme
[cite*****] in Java.  Using Kawa I was able to program a little more
interactively with Java but I kept running into missing library items.
I was continually forced to choose between finding versions of btrees,
hash tables, etc., in public-domain Scheme code, or making
foreign-function interfaces to Java versions of the same.

I ended up doing more of the later.  I automated this with an "import"
macro which would automatically wrap all or selected methods of
specified Java classes using Java reflection.  However, I then kept
running into the need to convert between Kawa/Scheme IO, strings,
characters, etc., and Java IO, strings, charactes, etc.  When I wanted
to define classes for use in Kawa I either had to write the classes in
Java which I could import with my macro, or I could use Meroon
[cite*****] or some other Scheme object system.  However the Scheme
objects did not interoperate with the Java objects so I was back to
the non-interoperability of Kawa and Java types again.  This lack of
interoperability just kept cropping up every step of the way,
particularly in exceptions.

That's when I got the idea for JIST.

Why not create a version of Java which uses LISP syntax (or, more
precisely, LISP's lack of syntax) to write Java classes?  Then extend
that system to include a few special forms (LAMBDA, DEFINE, SET!, IF,
DEFINE-SNYTAX, *****), and a read-eval-print loop and support for
incremental (re)definition to support interactive program development.
In other words, a minimal LISP system with complete interoperability
with Java to leverage the Java Virtual Machine and growing Java class
libraries.

That's why JIST is called JIST and not JISP, to emphasize the
combination of Java and lIST capabilities and syntax, rather than give
the impression of a LISP system written in Java.
