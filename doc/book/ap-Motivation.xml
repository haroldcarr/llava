<!--
//
// Created       : a long time ago by Harold Carr.
// Last Modified : 2004 Aug 26 (Thu) 23:08:23 by Harold Carr.
//
-->
<appendix id="llava-ap-motivation">

  <title>Motivation</title>

  <para>
During the 80s I was involved in designing and building LISP systems
[cite*****].  When funding for LISP became scarce I switched to
distributed computing and ended up working for SUN Microsystems on
CORBA software in C++ [cite*****].  Then Java arrived.  At SUN, our
group's efforts in C++ were redirected towards Java.
  </para>

  <para>
Immediately, upon first using Java, I was struck by the fact that it
was fun to program again (vis-a-vis the tedious nature of programming
in C++).  It was clear that the reason for this joy was Java's higher
level ala LISP.  However, once I tasted that level again I was soon
disappointed by Java since it lacked many features of LISP which make
working at that level fun and productive.
  </para>

  <para>
Then Per Bothner released Kawa [cite*****], a version of Scheme
[cite*****] in Java.  Using Kawa I was able to program a little more
interactively with Java but I kept running into missing library items.
I was continually forced to choose between finding versions of btrees,
hash tables, etc., in public-domain Scheme code, or making
foreign-function interfaces to Java versions of the same.
  </para>

  <para>
I ended up doing more of the later.  I automated this with an "import"
macro which would automatically wrap all or selected methods of
specified Java classes using Java reflection.  However, I then kept
running into the need to convert between Kawa/Scheme IO, strings,
characters, etc., and Java IO, strings, charactes, etc.  When I wanted
to define classes for use in Kawa I either had to write the classes in
Java which I could import with my macro, or I could use Meroon
[cite*****] or some other Scheme object system.  However the Scheme
objects did not interoperate with the Java objects so I was back to
the non-interoperability of Kawa and Java types again.  This lack of
interoperability just kept cropping up every step of the way,
particularly in exceptions.  (I haven't kept track of Kawa, so many of
these problems, problems for me at least, may be resolved.  Plus, I
definitely recommend Kawa where performance is a concern.  Kawa is a
great system.)
  </para>

  <para>
That's when I got the idea for LLAVA.
  </para>

  <para>
Why not create a version of Java which uses LISP syntax (or, more
precisely, LISP's lack of syntax) to write Java classes?  Then extend
that system to include a few special forms (LAMBDA, DEFINE, SET!, IF,
DEFINE-SNYTAX, *****), and a read-eval-print loop and support for
incremental (re)definition to support interactive program development.
In other words, a minimal LISP system with complete interoperability
with Java to leverage the Java Virtual Machine and growing Java class
libraries.
  </para>

  <para>
  Originally my name for llava was JIST: for Java + lIST.  I called it
  JIST (not JISP), to emphasize the combination of Java and lIST
  capabilities and syntax, rather than give the impression of a LISP
  system written in Java.
  </para>

  <para>
  But JIST (or JISP) didn't sound right.  So I went with LAVA: for
  Lisp + jAVA.  But lava.org was already taken so I added an "l" -
  thus: llava (pronounced either "lava" - like the volcanic stuff - or
  "yava" - like in Spanish - your choice).
  </para>

  <para>
  llava is <emphasis>not</emphasis> a LISP/Scheme system written in
  Java.  The philosophy of llava is: maximum leverage of
  Java&mdash;only add what is missing or cannot be done in Java 
  (e.g., list "syntax" and library, repl, incremental (re)definition,
  macros).
  </para>

</appendix>
