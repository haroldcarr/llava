;;;; Copyright (c) 1997 - 2004 Harold Carr
;;;;
;;;; This work is licensed under the Creative Commons Attribution License.
;;;; To view a copy of this license, visit 
;;;;   http://creativecommons.org/licenses/by/2.0/
;;;; or send a letter to
;;;;   Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA
;;;;---------------------------------------------------------------------------

;;;;
;;;; Created       : 2000 Jan 18 (Tue) 04:24:10 by Harold Carr.
;;;; Last Modified : 2005 Feb 06 (Sun) 16:09:49 by Harold Carr.
;;;;

;made into primitive for speed

;(define instanceof
;  (lambda (obj type)
;    (isInstance (-si 'forName 'java.lang.Class (toString type)) obj)))

(define-syntax new
  (lambda (class-name . args)
    (set! class-name 
	  (getFullNameForClass _%boot-namespace (eval class-name)))
    ;; let and quasiquote are not available yet
    ;;`(new* ',class-name ,@args))))
    ;;(-println (cons 'new* (cons (list 'quote class-name) args)))
    (cons 'new* (cons (list 'quote class-name) args))))

;;; End of file.;;;; Copyright (c) 1997 - 2004 Harold Carr
;;;;
;;;; This work is licensed under the Creative Commons Attribution License.
;;;; To view a copy of this license, visit 
;;;;   http://creativecommons.org/licenses/by/2.0/
;;;; or send a letter to
;;;;   Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA
;;;;---------------------------------------------------------------------------

;;;;
;;;; Created       : 2000 Jan 18 (Tue) 04:24:10 by Harold Carr.
;;;; Last Modified : 2004 Dec 07 (Tue) 18:28:34 by Harold Carr.
;;;;

;made into primitives for speed

;(define not
;  (lambda (x) (-if x false true)))

;(define null?
;  (lambda (x) (eq? x null)))

;(define pair?
;  (lambda (exp) (instanceof exp 'org.llava.Pair)))

;(define string->symbol
;  (lambda (x) (-si 'newSymbol 'org.llava.F x)))

;(define symbol?
;  (lambda (exp) (instanceof exp 'org.llava.Symbol)))

;;; End of file.;;;; Copyright (c) 1997 - 2004 Harold Carr
;;;;
;;;; This work is licensed under the Creative Commons Attribution License.
;;;; To view a copy of this license, visit 
;;;;   http://creativecommons.org/licenses/by/2.0/
;;;; or send a letter to
;;;;   Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA
;;;;---------------------------------------------------------------------------

;;;;
;;;; Created       : 2000 Jan 18 (Tue) 04:24:10 by Harold Carr.
;;;; Last Modified : 2004 Nov 30 (Tue) 06:51:21 by Harold Carr.
;;;;

;; map made into primitive for speed.

;(define (map f . lists) 
;  (if (null? lists)
;      '() 
;      (if (null? (cdr lists))
;	  (_%mapone f (car lists)) 
;	  (_%mapmany f lists))))
;
;(define _%mapone
;  (lambda (f x)  
;    (if (null? x)
;	'() 
;	(cons (f (car x))
;	      (_%mapone f (cdr x))))))
;
;(define _%mapmany
;  (lambda (f xs)  
;    (if (null? (car xs))
;	'() 
;	(cons (apply f (_%mapone car xs))
;	      (_%mapmany f (_%mapone cdr xs))))))
;

;; for-each factored into map implementation.

;(define for-each map)

;;;; End of file.
;;;; Copyright (c) 1997 - 2004 Harold Carr
;;;;
;;;; This work is licensed under the Creative Commons Attribution License.
;;;; To view a copy of this license, visit 
;;;;   http://creativecommons.org/licenses/by/2.0/
;;;; or send a letter to
;;;;   Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA
;;;;---------------------------------------------------------------------------

;;;;
;;;; Created       : 2000 Jan 18 (Tue) 04:24:10 by Harold Carr.
;;;; Last Modified : 2004 Nov 30 (Tue) 10:22:58 by Harold Carr.
;;;;

;;; Safe car and cdr.

(define -car (lambda (x) (if (null? x) '() (car x))))
(define -cdr (lambda (x) (if (null? x) '() (cdr x))))

;; REVISIT  handling of ==>
;; REVISIT collapse cadr s

(define-syntax cond 
  (lambda args  
    (if (null? args) 
	false 
	(if (equal? (-car (-car args)) 'else) 
	    (cons 'begin (-cdr (-car args))) 
	    (if (equal? (-car (-cdr (-car args))) '=>) 
		(list '(lambda (x e c) (-if x (e x) (c))) 
		      (-car (-car args)) 
		      (-car (-cdr (-cdr (-car args)))) 
		      (cons 'lambda (list () (cons 'cond (-cdr args))))) 
		(if (null? (-cdr (-car args))) 
		    (list '(lambda (x c) (-if x x (c))) 
			  (-car (-car args)) 
			  (cons 'lambda (list () (cons 'cond (-cdr args))))) 
		    (list '-if (-car (-car args)) 
			  (cons 'begin (-cdr (-car args))) 
			  (cons 'cond (-cdr args)))))))))

(define-syntax or
  (lambda args
    (if (null? args)
        false
        (cons 'cond (map list args)))))

(define-syntax and
  (lambda args
    (cond ((null? args) true)
	  ((null? (cdr args)) (car args))
	  (else (list '-if (car args) (cons 'and (cdr args)) false)))))

;;; End of file.

;;;; Copyright (c) 1997 - 2004 Harold Carr
;;;;
;;;; This work is licensed under the Creative Commons Attribution License.
;;;; To view a copy of this license, visit 
;;;;   http://creativecommons.org/licenses/by/2.0/
;;;; or send a letter to
;;;;   Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA
;;;;---------------------------------------------------------------------------

;;;;
;;;; Created       : 2000 Jan 18 (Tue) 04:24:10 by Harold Carr.
;;;; Last Modified : 2004 Sep 06 (Mon) 01:25:02 by Harold Carr.
;;;;

(define-syntax quasiquote
  (lambda (x)
    (_%expand-quasiquote x 0)))

(define _%expand-quasiquote
  (lambda (exp nesting)
    (cond
     ((not (pair? exp))
      ;;(-println 1)
      (if (_%constant? exp) 
	  (begin 
	    ;;(-println 1.1)
	    exp)
	  (begin 
	    ;;(-println 1.2)
	    (-list 'quote exp))))
     ((and (eq? (car exp) 'unquote) 
	   (equal? (length exp) 2))
      ;;(-println 2)
      (if (equal? nesting 0)
	  (begin 
	    ;;(-println 2.1)
	    (car (cdr exp)))
	  (begin
	    ;;(-println 2.2)
	    (_%combine-skeletons ''unquote
			       (_%expand-quasiquote (cdr exp) (- nesting 1))
			       exp))))
     ((and (eq? (car exp) 'quasiquote)
	   (equal? (length exp) 2))
      ;;(-println 3)
      (_%combine-skeletons ''quasiquote
			 (_%expand-quasiquote (cdr exp) (+ nesting 1))
			 exp))
     ((and (pair? (car exp))
	   (eq? (car (car exp)) 'unquote-splicing)
	   (equal? (length (car exp)) 2))
      ;;(-println 4)
      (if (equal? nesting 0)
	  (begin
	    ;;(-println 4.1)
	    (-list 'append (car (cdr (car exp)))
		  (_%expand-quasiquote (cdr exp) nesting)))
	  (begin
	    ;;(-println 4.2)
	    (_%combine-skeletons (_%expand-quasiquote (car exp) (- nesting 1))
			       (_%expand-quasiquote (cdr exp) nesting)
			       exp))))
     (else 
      ;;(-println 5)
      (_%combine-skeletons (_%expand-quasiquote (car exp) nesting)
			 (_%expand-quasiquote (cdr exp) nesting)
			 exp)))))

(define _%constant?
  (lambda (exp)
    (if (pair? exp)
	(eq? (car exp) 'quote)
	(not (symbol? exp)))))

(define _%combine-skeletons
  (lambda (left right exp)
    (cond
     ((and (_%constant? left) (_%constant? right))
      ;; (-println'cb1)
      (if (and (equal? (eval left ) (car exp))
	       (equal? (eval right) (cdr exp)))
	  (begin 
	    ;;(-println 'cb1.1)
	    (-list 'quote exp))
	  (begin 
	    ;;(-println 'cb1.2) 
	    (-list 'quote (cons (eval left )
			       (eval right))))))
     ((null? right)
      ;;(-println 'cb2)
      (-list '-list left))
     ((and (pair? right) (eq? (car right) '-list))
      ;;(-println 'cb3)
      (cons '-list (cons left (cdr right))))
     (else 
      ;;(-println 'cb4)
      (-list 'cons left right)))))

;;; End of file.;;;; Copyright (c) 1997 - 2004 Harold Carr
;;;;
;;;; This work is licensed under the Creative Commons Attribution License.
;;;; To view a copy of this license, visit 
;;;;   http://creativecommons.org/licenses/by/2.0/
;;;; or send a letter to
;;;;   Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA
;;;;---------------------------------------------------------------------------

;;;;
;;;; Created       : 2000 Jan 18 (Tue) 04:24:10 by Harold Carr.
;;;; Last Modified : 2004 Sep 09 (Thu) 19:41:41 by Harold Carr.
;;;;

;; REVISIT - add named-let

(define-syntax let
  (lambda (bindings . body)
    `((lambda ,(map car bindings) . ,body) . ,(map cadr bindings))))

(define-syntax let*
  (lambda (bindings . body)
    (if (null? bindings) `((lambda () . ,body))
        `(let (,(car bindings))
           (let* ,(cdr bindings) . ,body)))))

(define-syntax letrec
  (lambda (bindings . body)
    (let ((vars (map car  bindings))
	  (vals (map cadr bindings)))
      `(let ,(map (lambda (var) `(,var false)) vars)
	 ,@(map (lambda (var val) `(set! ,var ,val)) vars vals)
	 . ,body))))

;;; End of file.;;;;
;;;; Created       : 1999 Dec 18 (Sat) 17:14:40 by Harold Carr.
;;;; Last Modified : 2005 Feb 19 (Sat) 12:18:10 by Harold Carr.
;;;;

(define -read
  (lambda in
    (if (null? in)
        (-i 'read _%reader)
        (-i 'read _%reader (car in)))))

(define eof-object?
  (lambda (x)
    (equals (-i 'getEOFObject _%reader) x)))

(define -write
  (lambda (msg . out)
    (cond ((null? out)
	   (-i 'write _%writer msg)
	   (-flush))
	  (else
	   (-i 'write _%writer msg (car out))
	   (-flush (car out))))
    msg))

(define -writeln
  (lambda (msg . out)
    (cond ((null? out)
	   (-i 'write _%writer msg)
	   (-newline)
	   (-flush))
	  (else
	   (-i 'write _%writer msg (car out))
	   (-newline (car out))
	   (-flush (car out))))
    msg))

(define set-vector-print-length!
  (lambda (x)
    (-i 'setVectorPrintLength _%writer x)))

(define -print
  (lambda (msg . out)
    (let ((n-msg (if (null? msg) "null" msg)))
      (cond ((null? out)
	     (-i 'print (getPrintWriter _%writer) n-msg)
	     (-flush))
	    (else
	     (-i 'print (car out) n-msg)
	     (-flush (car out)))))
    msg))

(define -println
  (lambda msg-and-out
    (let* ((no-args? (null? msg-and-out))
	   (n-msg (if (not no-args?) 
		      (if (null? (first msg-and-out))
			  "null"
			  (first msg-and-out))
		      null))
	   (out (if (and (not no-args?) (pair? (rest msg-and-out)))
		    (second msg-and-out)
		    null)))
      (if no-args?
	  (-newline)
	  (cond ((null? out)
		 (-i 'print (getPrintWriter _%writer) n-msg)
		 (-newline)
		 (-flush))
		(else
		 (-i 'print out n-msg)
		 (-newline out)
		 (-flush out)))))
    (if (pair? msg-and-out) (first msg-and-out) null)))

(define -newline 
  (lambda out
    (-i 'println (if (null? out) (getPrintWriter _%writer) (car out)))
    null))

(define -flush
  (lambda out
    (-i 'flush (if (null? out) (getPrintWriter _%writer) (car out)))
    null))

;;; End of file.
;;;; Copyright (c) 1997 - 2004 Harold Carr
;;;;
;;;; This work is licensed under the Creative Commons Attribution License.
;;;; To view a copy of this license, visit 
;;;;   http://creativecommons.org/licenses/by/2.0/
;;;; or send a letter to
;;;;   Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA
;;;;---------------------------------------------------------------------------

;;;;
;;;; Created       : 2000 Jan 18 (Tue) 05:58:33 by Harold Carr.
;;;; Last Modified : 2004 Sep 09 (Thu) 19:40:29 by Harold Carr.
;;;;

(define _%do-case 
  (lambda (case)
    (cond ((not (pair? case)) (error "bad syntax in case" case))
	  ((eq? (first case) 'else) case)
	  (else `((member __exp__ ',(first case)) . ,(rest case))))))

(define-syntax case
  (lambda (exp . cases)
    `(let ((__exp__ ,exp)) (cond . ,(map _%do-case cases)))))

;;; End of file.
;;;; Copyright (c) 1997 - 2004 Harold Carr
;;;;
;;;; This work is licensed under the Creative Commons Attribution License.
;;;; To view a copy of this license, visit 
;;;;   http://creativecommons.org/licenses/by/2.0/
;;;; or send a letter to
;;;;   Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA
;;;;---------------------------------------------------------------------------

;;;;
;;;; Created       : 2000 Jan 18 (Tue) 05:58:33 by Harold Carr.
;;;; Last Modified : 2004 Nov 21 (Sun) 08:59:39 by Harold Carr.
;;;;

(define-syntax do
  (lambda (bindings test-and-result . body)
    (let ((variables (map first bindings))
          (inits (map second bindings))
          (steps (map (lambda (clause)
                        (if (null? (cddr clause))
                            (first clause)
                            (third clause)))
                      bindings))
          (test (first test-and-result))
          (result (rest test-and-result)))
      `(letrec ((__loop__
                 (lambda ,variables
                   (-if ,test
                       (begin . ,result)
                       (begin
                         ,@body
                         (__loop__ . ,steps))))))
         (__loop__ . ,inits)))))

;;; End of file.
;;;; Copyright (c) 1997 - 2004 Harold Carr
;;;;
;;;; This work is licensed under the Creative Commons Attribution License.
;;;; To view a copy of this license, visit 
;;;;   http://creativecommons.org/licenses/by/2.0/
;;;; or send a letter to
;;;;   Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA
;;;;---------------------------------------------------------------------------

;;;;
;;;; Created       : 2000 Jan 18 (Tue) 04:24:10 by Harold Carr.
;;;; Last Modified : 2004 Sep 09 (Thu) 19:44:40 by Harold Carr.
;;;;

(define (memq this that)
  (cond ((null? that) false)
	((eq? this (car that)) that)
	(else (memq this (cdr that)))))

(define (member this that)
  (cond ((null? that) false)
	((equal? this (car that)) that)
	(else (member this (cdr that)))))

;;; End of file.

;;;; Copyright (c) 1997 - 2004 Harold Carr
;;;;
;;;; This work is licensed under the Creative Commons Attribution License.
;;;; To view a copy of this license, visit 
;;;;   http://creativecommons.org/licenses/by/2.0/
;;;; or send a letter to
;;;;   Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA
;;;;---------------------------------------------------------------------------

;;;;
;;;; Created       : 2000 Jan 18 (Tue) 04:24:10 by Harold Carr.
;;;; Last Modified : 2004 Dec 07 (Tue) 18:28:18 by Harold Carr.
;;;;

;;; REVISIT - gensym let vars

(define-syntax try
  (lambda exprs-catch-finally
    (let ((tryExprs     (_%getTryExpressions     exprs-catch-finally))
	  (catchClauses (_%getCatchClauses       exprs-catch-finally))
	  (finallyExprs (_%getFinallyExpressions exprs-catch-finally)))
      `(_%try
	(lambda () ,@tryExprs)
	(lambda (t)
	  (let ((g2 (if (instanceof t 'org.llava.LlavaException)
			(getThrowable t)
			t)))
	    (cond ,@catchClauses
		  (else (throw t)))))
	(lambda () ,@finallyExprs)))))

(define (_%getTryExpressions exprs)
  (_%appendResults (lambda (x) (if (or (not (pair? x)) ; ref ok
				       (and (not (eq? (car x) 'catch))
					    (not (eq? (car x) 'finally))))
				   ;;  extra list level for appendResults
				   `(,x)
				   '()))
		   exprs))

(define (_%getCatchClauses catch-finally)
  (_%appendResults (lambda (x) (if (and (pair? x)
					(eq? (car x) 'catch))
				   `(((instanceof g2 ',(car (cadr x)))
				      (let ((,(cadr (cadr x)) g2)) ,@(cddr x))))
				   '()))
		   catch-finally))

(define (_%getFinallyExpressions catch-finally)
  (_%appendResults (lambda (x) (if (and (pair? x)
					(eq? (car x) 'finally))
				   (cdr x)
				   '()))
		   catch-finally))

;; removes empty lists

(define (_%appendResults proc lst)
  (apply append (map proc lst)))

;;; End of file.

;;;; Copyright (c) 1997 - 2004 Harold Carr
;;;;
;;;; This work is licensed under the Creative Commons Attribution License.
;;;; To view a copy of this license, visit 
;;;;   http://creativecommons.org/licenses/by/2.0/
;;;; or send a letter to
;;;;   Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA
;;;;---------------------------------------------------------------------------

;;;;
;;;; Created       : 2000 Jan 24 (Mon) 20:42:21 by Harold Carr.
;;;; Last Modified : 2004 Sep 05 (Sun) 14:25:13 by Harold Carr.
;;;;

(define-syntax synchronized
  (lambda (lock . body)
    `(_%synchronized ,lock (lambda () ,@body))))

(define-syntax import
  (lambda (classPathAndName)
    `(_%import ',classPathAndName)))

(define-syntax package
  (lambda (namespacePathAndClassName)
    `(_%package ',namespacePathAndClassName)))

;;; End of file.;;;; Copyright (c) 1997 - 2004 Harold Carr
;;;;
;;;; This work is licensed under the Creative Commons Attribution License.
;;;; To view a copy of this license, visit 
;;;;   http://creativecommons.org/licenses/by/2.0/
;;;; or send a letter to
;;;;   Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA
;;;;---------------------------------------------------------------------------

;;;;
;;;; Created       : 2004 Nov 25 (Thu) 14:56:00 by Harold Carr.
;;;; Last Modified : 2004 Dec 22 (Wed) 06:47:12 by Harold Carr.
;;;;

(define-syntax define-d
  (lambda (a b . body)
    (cond ((symbol? a)
	   (cond ((and (pair? b) (eq? (first b) 'lambda))
		  `(define ,a 
		      (lambda ,(second b)
			,(wrap-body a (second b) (cddr b))))) ;; @
		 (else
		  `(define ,a ,b))))
	  (else
	   `(define ,a ,(wrap-body (first a) (rest a) (cons b body)))))))

(define wrap-body
  (lambda (name args body)
    ;;(-println (list 'wrap-body name args body))
    `(let ((_%result%_ null)
	   (_%error%_ false))
       (try
	(begin
	  (print-enter ',name ,@(process-args args))
	  (set! _%result_% (begin ,@body)))
	(catch (java.lang.Throwable t)
	 (set! _%error%_ t)
	 (throw t))
	(finally
	 (print-exit _%error%_ _%result_% ',name ,@(process-args args)))))))

(define process-args
  (lambda (args) 
    (let ((result '(_%dummy%_)))
      (do ((a args (cdr a))
	   (rptr result (begin (setCdr rptr (cons (car a) '()))
			       (cdr rptr))))
	  ((not (pair? a))
	   (if (not (null? a))
	       (setCdr rptr (cons a '())))
	   (cdr result))))))

(define print-enter
  (lambda (name . args)
    (print-indent 'enter)
    (-print "->" )
    (print-common name args)
    (-newline)
    (-flush)))

(define print-exit
  (lambda (error result name . args)
    (print-indent 'exit)
    (-print "<" )
    (-if error (-print "E") (-print "-"))
    (print-common name args)
    (-print "= " )
    (-if error 
	 (-writeln error)
	 (-writeln result))
    (-flush)))


(let ((current-indent 0)
      (indent 1))

  (define set-define-d-indent!
    (lambda (x) (set! indent x)))

  (define print-indent
    (lambda (direction)
      (cond (indent
	     (if (eq? direction 'exit) 
		 (set! current-indent (- current-indent indent)))
	     (do ((i current-indent (- i 1)))
		 ((<= i 0))
	       (-print " "))
	     (if (eq? direction 'enter) 
		 (set! current-indent (+ current-indent indent)))))))

)

(define print-common
  (lambda (name args)
    (-print "(" )
    (-print name)
    (for-each (lambda (a) (-print " " ) (-write a)) args)
    (-print ") ")))

(-comment-
(load (s+ (user-home) "/.sync/.llava.org/.system/org/llava/derived/DerivedLlavaDefineD.lva"))
(define-d (f a n) n)
(define-d (f a . n) n)
(define-d a 3)
(define-d test (lambda (a . opt) (list a opt)))
(define-d (fact n)
  (cond ((<= n 0)
	 (error (s+ "fact: illegal argument: " n)))
	((= n 1) 1)
	((= n 7) (error "XXX"))
	(else
	 (* n (fact (- n 1))))))
(fact 5)
(fact 10)
(fact -1)
(set-define-d-indent! false)
(set-define-d-indent! 3)
(set-define-d-indent! 1)

(define-d (a n . acc)
  (if (= n 0)
      acc
      (a (- n 1) 
	 (+ n (first acc))
	 (* n (second acc)))))
(a 10 0 1)

(define-d b
  (lambda args
    (if (= (first args) 0)
	(rest args)
	(b (- (first args) 1)
	   (+ (first args) (second args))
	   (* (first args) (third args))))))
(b 10 0 1)

(define-d v
  (lambda (vec)
    (cond ((= (vector-ref vec 0) 0) "done")
	  ((= (vector-ref vec 0) -1) (new 'java.lang.Exception "BAD"))
	  (else
	   (vector-set! vec 0 (- (vector-ref vec 0) 1))
	   (v vec)))))
(v #(10 3))
(v #(-1))

)

;;; End of file.
;;;; Copyright (c) 1997 - 2004 Harold Carr
;;;;
;;;; This work is licensed under the Creative Commons Attribution License.
;;;; To view a copy of this license, visit 
;;;;   http://creativecommons.org/licenses/by/2.0/
;;;; or send a letter to
;;;;   Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA
;;;;---------------------------------------------------------------------------

;;;;
;;;; Created       : 1998 Dec 06 (Sun) 09:29:56 by Harold Carr.
;;;; Last Modified : 2004 Nov 27 (Sat) 07:50:40 by Harold Carr.
;;;;

(define vector?
  (lambda (x) 
      (if (null? x)
	  false
	  (isArray (getClass x)))))

(define make-vector
  (lambda (k . fill)
    (let ((v (-si 'newInstance 'java.lang.reflect.Array 
		  (-si 'forName 'java.lang.Class "java.lang.Object")
		  k)))
      (if (not (null? fill))
	  (do ((i 0 (+ i 1)))
	      ((>= i k))
	    (vector-set! v i (car fill))))
      v)))

(define (vector . values)
  (let* ((len  (length values))
	 (vect (make-vector len)))
    (do ((v values (cdr v))
	 (i 0 (+ i 1)))
	((null? v))
      (vector-set! vect i (car v)))
    vect))

(define vector-length
  (lambda (v) (-si 'getLength 'java.lang.reflect.Array v)))

(define vector-ref
  (lambda (v i) (-si 'get 'java.lang.reflect.Array v i)))

(define vector-set!
  (lambda (v i x) 
    (-si 'set 'java.lang.reflect.Array v i x)
    x))

(define vector->list
  (lambda (v)
    (let ((result '(_%dummy%_)))
      (do ((len (-si 'getLength 'java.lang.reflect.Array v))
	   (i 0 (+ i 1))
	   (rptr result 
		 (begin 
		   (setCdr rptr 
			   (cons (-si 'get 'java.lang.reflect.Array v i) '()))
		   (cdr rptr))))
	  ((>= i len) (cdr result))))))

(define list->vector
  (lambda (l)
    (-si 'toArray 'org.llava.impl.util.List l)))

(-comment-
(isArray (getClass (listFiles (new 'java.io.File "."))))
(vector->list (list->vector '(1 2 3)))
)

;;; End of file.
;;;; Copyright (c) 1997 - 2004 Harold Carr
;;;;
;;;; This work is licensed under the Creative Commons Attribution License.
;;;; To view a copy of this license, visit 
;;;;   http://creativecommons.org/licenses/by/2.0/
;;;; or send a letter to
;;;;   Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA
;;;;---------------------------------------------------------------------------


;;;;
;;;; Created       : 2000 Jan 23 (Sun) 17:28:32 by Harold Carr.
;;;; Last Modified : 2004 Sep 03 (Fri) 15:46:33 by Harold Carr.
;;;;

;; This file is a convenient place to put definitions
;; and then exercise those definitions from TestTop.testTop
;; under control of a Java debug stepper.

;; Intentionally blank.

;;; End of file.
;;;; Copyright (c) 1997 - 2004 Harold Carr
;;;;
;;;; This work is licensed under the Creative Commons Attribution License.
;;;; To view a copy of this license, visit 
;;;;   http://creativecommons.org/licenses/by/2.0/
;;;; or send a letter to
;;;;   Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA
;;;;---------------------------------------------------------------------------


;;;;
;;;; Created       : 1998 Dec 13 (Sun) 09:18:12 by Harold Carr.
;;;; Last Modified : 2005 Feb 06 (Sun) 16:03:53 by Harold Carr.
;;;;
;;;; Provides import
;;;;

; Given a Java class:
;
;     *****
;
; then
;
;     (import '*****)
;
; results in the following procedure definitions:
;
;     *****
;
; Alternatively, rather than define all public constructors, methods
; fields, one can specify the subset to be defined:
;
;     (import '***** '*****)
;

(define-syntax _%setq
  (lambda (var val)
    `(let ((_lazy_hygenie_ ,val))
       (set! ,var _lazy_hygenie_)
       _lazy_hygenie_)))

;;;;
;;;; First we define a few by hand to be used by "import" and friends.
;;;;

(define _%java_lang_Class_forName 
  (lambda (className)
    (if (symbol? className) (set! className (toString className)))  
    (-si 'forName 'java.lang.Class className)))

(define _%java_lang_reflect_Modifier_isPublic 
  (lambda (int)
    (-si 'isPublic 'java.lang.reflect.Modifier int)))

(define _%java_lang_reflect_Modifier_isStatic
  (lambda (int)
    (-si 'isStatic 'java.lang.reflect.Modifier int)))

(define _%java_lang_reflect_Array_get
  (lambda (o i)
    (-si 'get 'java.lang.reflect.Array o i)))

(define _%java_lang_reflect_Array_getLength 
  (lambda (o)
    (-si 'getLength 'java.lang.reflect.Array o)))

;;;
;;; _%isPublic? _%isStatic?
;;;

(define _%isPublic?
  (lambda (x)
    (_%java_lang_reflect_Modifier_isPublic (getModifiers x))))

(define _%isStatic?
  (lambda (x)
    (_%java_lang_reflect_Modifier_isStatic (getModifiers x))))

;;;
;;; _%isMemberOfArray
;;;
;;; false if not present.  Otherwise the first element which passes the test.
;;;

(define _%isMemberOfArray
  (lambda (test array)
    (call/cc
     (lambda (return)
       (do ((len (_%java_lang_reflect_Array_getLength array))
	    (i 0 (+ i 1)))
	   ((>= i len) (return false))
	 (let ((el (_%java_lang_reflect_Array_get array i)))
	   (if (test el)
	       (return el))))))))

;;;
;;; _%mapJavaArray
;;;

(define _%mapJavaArray 
  (lambda (proc array)
    (let ((result '(dummy)))
      (do ((len (_%java_lang_reflect_Array_getLength array))
	   (rptr result
		 (begin
		   (setCdr rptr
			   (cons (proc (_%java_lang_reflect_Array_get array i))
				 '()))
		   (cdr rptr)))
	   (i 0 (+ i 1)))
	  ((>= i len) (cdr result))))))

;;;
;;; For defining the procedures.  Also for debugging.
;;;

(define *_%evalDefineCMF* 'eval)
(define _%evalDefineCMFWrite (lambda (form) (-println form) form))
(define _%evalDefineCMFEval  (lambda (form) (eval form)))

(define _%evalDefineCMF
  (lambda (form)
    (case *_%evalDefineCMF*
      ((write    ) (_%evalDefineCMFWrite form))
      ((eval     ) (_%evalDefineCMFEval  form))
      ((writeEval) (_%evalDefineCMFEval  (_%evalDefineCMFWrite form)))
      ((none     ) 'none)
      (else (error (string-append "_%evalDefineCMF - unknown: "
				  (toString form)))))))

; Uncomment for debug.
;(set! *_%evalDefineCMF* 'writeEval)
;(set! *_%evalDefineCMF* 'write)

;;;
;;; Always useful.
;;;

(define _%makeSymOrStr
  (lambda (symOrStr . args)
    (let ((result (apply string-append
			 (map (lambda (x)
				(if (symbol? x)
				    (toString x)
				    x))
			      args))))
      (if (eq? symOrStr 'symbol)
	  (string->symbol result)
	  result))))

;;;
;;; Determines whether procedures are defined as
;;;
;;;     (define (java.lang.Float.valueOf . args) ...)
;;;
;;; or
;;;
;;;     (define (valueOf . args) ...)
;;;
;;; The first is useful when not using a package system.
;;; The second is the default and assume you are already in
;;; the correct package.
;;;

(define _%fullName? false)

;;;
;;; Useful for browsing the methods of a class.
;;;

(define _%showVirtual? false)

;;;
;;; import
;;;
;;; The main procedure.
;;;

(define _%importAux
  (lambda (className . methodOrFieldNames)
    (let* ((class
	    (_%java_lang_Class_forName (_%makeSymOrStr 'string className)))
	   (constructors (getConstructors    class))
	   (methods      (getDeclaredMethods class))
	   (fields       (getDeclaredFields  class)))
      (if (null? methodOrFieldNames)
	  (_%defineAllCMF className class constructors methods fields)
	  (for-each
	   (lambda (methodOrFieldName)
	     (_%defineCMF
	      className
	      (_%makeSymOrStr 'symbol methodOrFieldName)
	      class constructors methods fields))
	   methodOrFieldNames)))
    true))

;; Define an individual constructor, method or field.

(define _%defineCMF
  (lambda (className methodOrFieldName class constructors methods fields)
    (if (eq? methodOrFieldName 'constructor)
	(_%defineC className class constructors)
	(_%defineMF className methodOrFieldName class methods fields))))

;; Define an individual constructor.

(define _%defineC
  (lambda (className class constructors)
    (let* ((cnStr (toString className))
	   ;; foo.bar.baz -> baz;  baz -> baz
	   (baseName (_%makeSymOrStr 
		      'symbol(substring cnStr (+ 1 (lastIndexOf cnStr "."))))))
      (if (and 
	   (not (equal? 0
			(_%java_lang_reflect_Array_getLength constructors)))
	   (not (equal? 0 
			(length (apply 
				 append
				 (_%mapJavaArray
				  (lambda (x)
				    (if (_%isPublic? x) '(true) '()))
				  constructors))))))
	  (_%evalDefineCMF
	   `(define (,baseName . args) (apply new* (cons ',className args))))
	  (error 
	   (s+ "No constructor for class: " (toString className)))))))

;; Define an individual method or field.

(define _%defineMF
  (lambda (className methodOrFieldName class methods fields)
    (let* ((nameString (_%makeSymOrStr 'string methodOrFieldName))
	   (test       (lambda (el) (equal? (getName el) nameString)))
	   (el         '()))
      (cond ((_%setq el (_%isMemberOfArray test methods))
	     (if (_%isPublic? el) 
		 (_%defineM className methodOrFieldName class el)))
	    ((_%setq el (_%isMemberOfArray test fields))
	     (if (_%isPublic? el) 
		 (_%defineF className methodOrFieldName class el)))
	    (else
	     (error (string-append "Unknown method or field: "
				   (toString className)
				   " "
				   (toString methodOrFieldName))))))))

;; Define an individual method.

(define _%defineM
  (lambda (className methodName class method)
    (set! methodName (if _%fullName? 
			 (_%makeSymOrStr 'symbol  className "." methodName)
			 methodName))
    ;; Only static methods since virtual are picked up automatically.
    (if (_%isStatic? method)
	(_%evalDefineCMF
	 ;; REVISIT - no need to use apply? - maybe to get value of methodName
	 `(define (,methodName . args)
	    (apply -si (cons ',methodName (cons ',className args)))))
	(if _%showVirtual?
	    (_%evalDefineCMF methodName)))))

;; Define an individual field.

(define _%defineF 
  (lambda (className fieldName class field)
    (let* ((isStatic (_%isStatic? field))
	   (name     (if (and _%fullName? isStatic)
			 (_%makeSymOrStr 'symbol className "." fieldName)
			 fieldName))
	   (name!    (_%makeSymOrStr 'symbol name "!"))
	   (andArg   (if isStatic `(,name)  `(,name  o)))
	   (andArg!  (if isStatic `(,name!) `(,name! o)))
	   (andVal   (append andArg  '(v)))
	   (andVal!  (append andArg! '(v))))
      (_%evalDefineCMF
       `(define ,andArg
	  ,(if isStatic
	       `(-sf ',fieldName ',className)
	       `(-f  ',fieldName o))))
      (_%evalDefineCMF
       `(define ,andVal!
	  ,(if isStatic
	       `(-sf ',fieldName ',className v)
	       `(-f  ',fieldName o           v)))))))

; Define procedures for all public constructors, methods and fields.

(define _%defineAllCMF
  (lambda (className class constructors methods fields)
    (let* ((methodNames (_%mapJavaArray (lambda (x) (getName x)) methods))
	   (fieldNames  (_%mapJavaArray (lambda (x) (getName x)) fields))
	   (methodAndFieldNames (append methodNames fieldNames))
	   (importArgs
	    (cons className
		  (if (> (_%java_lang_reflect_Array_getLength constructors) 0)
		      (cons 'constructor methodAndFieldNames)
		      methodAndFieldNames))))
      (apply _%importAux importArgs))))
      
(-comment-

(load "import.lva")
;(set! *_%evalDefineCMF* 'write)
;(set! *_%evalDefineCMF* 'writeEval)
(_%import 'java.lang.Float)
(import 'java.lang.Float 'constructor)
(java.lang.Float "34")
(java.lang.Float.MAX_VALUE)
(java.lang.Float.MAX_VALUE! (java.lang.Float 3.4028235E38))
(_%importAux 'java.util.Vector)
(_%importAux 'java.util.Hashtable)
(_%importAux 'java.lang.System 'out)
(import 'java.lang.System 'constructor)
(import 'java.lang.System 'bar)
(import 'java.util.Vector 'constructor 'addElement 'contains 'toString)
(define v (java.util.Vector))
(isEmpty v)
(define o (java.lang.System.out))
(addElement v o)
(isEmpty v)
(contains v o)
(toString v)
)


;;; End of file.