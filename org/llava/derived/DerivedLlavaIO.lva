;;;;
;;;; Created       : 1999 Dec 18 (Sat) 17:14:40 by Harold Carr.
;;;; Last Modified : 2005 Feb 19 (Sat) 12:18:10 by Harold Carr.
;;;;

(define -read
  (lambda in
    (if (null? in)
        (-i 'read _%reader)
        (-i 'read _%reader (car in)))))

(define eof-object?
  (lambda (x)
    (equals (-i 'getEOFObject _%reader) x)))

(define -write
  (lambda (msg . out)
    (cond ((null? out)
	   (-i 'write _%writer msg)
	   (-flush))
	  (else
	   (-i 'write _%writer msg (car out))
	   (-flush (car out))))
    msg))

(define -writeln
  (lambda (msg . out)
    (cond ((null? out)
	   (-i 'write _%writer msg)
	   (-newline)
	   (-flush))
	  (else
	   (-i 'write _%writer msg (car out))
	   (-newline (car out))
	   (-flush (car out))))
    msg))

(define set-vector-print-length!
  (lambda (x)
    (-i 'setVectorPrintLength _%writer x)))

(define -print
  (lambda (msg . out)
    (let ((n-msg (if (null? msg) "null" msg)))
      (cond ((null? out)
	     (-i 'print (getPrintWriter _%writer) n-msg)
	     (-flush))
	    (else
	     (-i 'print (car out) n-msg)
	     (-flush (car out)))))
    msg))

(define -println
  (lambda msg-and-out
    (let* ((no-args? (null? msg-and-out))
	   (n-msg (if (not no-args?) 
		      (if (null? (first msg-and-out))
			  "null"
			  (first msg-and-out))
		      null))
	   (out (if (and (not no-args?) (pair? (rest msg-and-out)))
		    (second msg-and-out)
		    null)))
      (if no-args?
	  (-newline)
	  (cond ((null? out)
		 (-i 'print (getPrintWriter _%writer) n-msg)
		 (-newline)
		 (-flush))
		(else
		 (-i 'print out n-msg)
		 (-newline out)
		 (-flush out)))))
    (if (pair? msg-and-out) (first msg-and-out) null)))

(define -newline 
  (lambda out
    (-i 'println (if (null? out) (getPrintWriter _%writer) (car out)))
    null))

(define -flush
  (lambda out
    (-i 'flush (if (null? out) (getPrintWriter _%writer) (car out)))
    null))

;;; End of file.
