;;;;
;;;; Created       : 1998 Dec 13 (Sun) 09:18:12 by Harold Carr.
;;;; Last Modified : 2001 Mar 06 (Tue) 09:16:23 by Harold Carr.
;;;;
;;;; Provides import
;;;;

; Given a Java class:
;
;     *****
;
; then
;
;     (import '*****)
;
; results in the following procedure definitions:
;
;     *****
;
; Alternatively, rather than define all public constructors, methods
; fields, one can specify the subset to be defined:
;
;     (import '***** '*****)
;

(define-syntax _%setq
  (lambda (var val)
    `(let ((_lazy_hygenie_ ,val))
       (set! ,var _lazy_hygenie_)
       _lazy_hygenie_)))

;;;;
;;;; First we define a few by hand to be used by "import" and friends.
;;;;

(define _%java_lang_Class_forName 
  (lambda (className)
    (if (symbol? className) (set! className (toString className)))  
    (_si 'forName 'java.lang.Class className)))

(define _%java_lang_reflect_Modifier_isPublic 
  (lambda (int)
    (_si 'isPublic 'java.lang.reflect.Modifier int)))

(define _%java_lang_reflect_Modifier_isStatic
  (lambda (int)
    (_si 'isStatic 'java.lang.reflect.Modifier int)))

(define _%java_lang_reflect_Array_get
  (lambda (o i)
    (_si 'get 'java.lang.reflect.Array o i)))

(define _%java_lang_reflect_Array_getLength 
  (lambda (o)
    (_si 'getLength 'java.lang.reflect.Array o)))

;;;
;;; _%isPublic? _%isStatic?
;;;

(define _%isPublic?
  (lambda (x)
    (_%java_lang_reflect_Modifier_isPublic (getModifiers x))))

(define _%isStatic?
  (lambda (x)
    (_%java_lang_reflect_Modifier_isStatic (getModifiers x))))

;;;
;;; _%isMemberOfArray
;;;
;;; false if not present.  Otherwise the first element which passes the test.
;;;

(define _%isMemberOfArray
  (lambda (test array)
    (call/cc
     (lambda (return)
       (do ((len (_%java_lang_reflect_Array_getLength array))
	    (i 0 (+ i 1)))
	   ((>= i len) (return false))
	 (let ((el (_%java_lang_reflect_Array_get array i)))
	   (if (test el)
	       (return el))))))))

;;;
;;; _%mapJavaArray
;;;

(define _%mapJavaArray 
  (lambda (proc array)
    (let ((result '(dummy)))
      (do ((len (_%java_lang_reflect_Array_getLength array))
	   (rptr result
		 (begin
		   (setCdr rptr
			   (cons (proc (_%java_lang_reflect_Array_get array i))
				 '()))
		   (cdr rptr)))
	   (i 0 (+ i 1)))
	  ((>= i len) (cdr result))))))

;;;
;;; For defining the procedures.  Also for debugging.
;;;

(define *_%evalDefineCMF* 'eval)
(define _%evalDefineCMFWrite (lambda (form) (_print form) form))
(define _%evalDefineCMFEval  (lambda (form) (eval form)))

(define _%evalDefineCMF
  (lambda (form)
    (case *_%evalDefineCMF*
      ((write    ) (_%evalDefineCMFWrite form))
      ((eval     ) (_%evalDefineCMFEval  form))
      ((writeEval) (_%evalDefineCMFEval  (_%evalDefineCMFWrite form)))
      ((none     ) 'none)
      (else (error (string-append "_%evalDefineCMF - unknown: "
				  (toString form)))))))

; Uncomment for debug.
;(set! *_%evalDefineCMF* 'writeEval)
(set! *_%evalDefineCMF* 'write)

;;;
;;; Always useful.
;;;

(define _%makeSymOrStr
  (lambda (symOrStr . args)
    (let ((result (apply string-append
			 (map (lambda (x)
				(if (symbol? x)
				    (toString x)
				    x))
			      args))))
      (if (eq? symOrStr 'symbol)
	  (string->symbol result)
	  result))))

;;;
;;; import
;;;
;;; The main procedure.
;;;

(define _%importAux
  (lambda (className . methodOrFieldNames)
    (let* ((class
	    (_%java_lang_Class_forName (_%makeSymOrStr 'string className)))
	   (constructors (getConstructors    class))
	   (methods      (getDeclaredMethods class))
	   (fields       (getDeclaredFields  class)))
      (if (null? methodOrFieldNames)
	  (_%defineAllCMF className class constructors methods fields)
	  (for-each
	   (lambda (methodOrFieldName)
	     (_%defineCMF
	      className
	      (_%makeSymOrStr 'symbol methodOrFieldName)
	      class constructors methods fields))
	   methodOrFieldNames)))
    true))

;; Define an individual constructor, method or field.

(define _%defineCMF
  (lambda (className methodOrFieldName class constructors methods fields)
    (if (eq? methodOrFieldName 'constructor)
	(_%defineC className class constructors)
	(_%defineMF className methodOrFieldName class methods fields))))

;; Define an individual constructor.

(define _%defineC
  (lambda (className class constructors)
    "Use new"))
(_comment
    (if (and (not (equal? 0
			  (_%java_lang_reflect_Array_getLength constructors)))
	     (not (equal? 0 
			  (length (apply 
				   append
				   (_%mapJavaArray
				    (lambda (x)
				      (if (_%isPublic? x) '(true) '()))
				    constructors))))))
	(_%evalDefineCMF
	 `(define (,className . args) (apply new (cons ',className args))))
	(error 
	 (string-append "No constructor for class: " (toString className))))))
)

;; Define an individual method or field.

(define _%defineMF
  (lambda (className methodOrFieldName class methods fields)
    (let* ((nameString (_%makeSymOrStr 'string methodOrFieldName))
	   (test       (lambda (el) (equal? (getName el) nameString)))
	   (el         '()))
      (cond ((_%setq el (_%isMemberOfArray test methods))
	     (if (_%isPublic? el) 
		 (_%defineM className methodOrFieldName class el)))
	    ((_%setq el (_%isMemberOfArray test fields))
	     (if (_%isPublic? el) 
		 (_%defineF className methodOrFieldName class el)))
	    (else
	     (error (string-append "Unknown method or field: "
				   (toString className)
				   " "
				   (toString methodOrFieldName))))))))

;; Define an individual method.

(define _%defineM
  (lambda (className methodName class method)
    ;; Only static methods since virtual are picked up automatically.
    (if (_%isStatic? method)
	(_%evalDefineCMF
	 `(define (,(_%makeSymOrStr 'symbol  className "." methodName) . args)
	    (apply _si (cons ',methodName (cons ',className args))))))))

;; Define an individual field.

(define _%defineF 
  (lambda (className fieldName class field)
    (let* ((isStatic (_%isStatic? field))
	   (name     (if isStatic
			 (_%makeSymOrStr 'symbol className "." fieldName)
			 fieldName))
	   (name!    (_%makeSymOrStr 'symbol name "!"))
	   (andArg   (if isStatic `(,name)  `(,name  o)))
	   (andArg!  (if isStatic `(,name!) `(,name! o)))
	   (andVal   (append andArg  '(v)))
	   (andVal!  (append andArg! '(v))))
      (_%evalDefineCMF
       `(define ,andArg
	  ,(if isStatic
	       `(_sf ',fieldName ',className)
	       `(_f  ',fieldName o))))
      (_%evalDefineCMF
       `(define ,andVal!
	  ,(if isStatic
	       `(_sf ',fieldName ',className v)
	       `(_f  ',fieldName o           v)))))))

; Define procedures for all public constructors, methods and fields.

(define _%defineAllCMF
  (lambda (className class constructors methods fields)
    (let* ((methodNames (_%mapJavaArray (lambda (x) (getName x)) methods))
	   (fieldNames  (_%mapJavaArray (lambda (x) (getName x)) fields))
	   (methodAndFieldNames (append methodNames fieldNames))
	   (importArgs
	    (cons className
		  (if (> (_%java_lang_reflect_Array_getLength constructors) 0)
		      (cons 'constructor methodAndFieldNames)
		      methodAndFieldNames))))
      (apply _%importAux importArgs))))
      

(provide 'java/lang/import)


(_comment

(load "import.lva")
;(set! *_%evalDefineCMF* 'write)
(import 'java.lang.Float)
(import 'java.lang.Float 'constructor)
(java.lang.Float "34")
(java.lang.Float.MAX_VALUE)
(java.lang.Float.MAX_VALUE! (java.lang.Float 3.4028235E38))
(_%importAux 'java.util.Vector)
(_%importAux 'java.util.Hashtable)
(import 'java.lang.System 'out)
(import 'java.lang.System 'constructor)
(import 'java.lang.System 'bar)
(import 'java.util.Vector 'constructor 'addElement 'contains 'toString)
(define v (java.util.Vector))
(isEmpty v)
(define o (java.lang.System.out))
(addElement v o)
(isEmpty v)
(contains v o)
(toString v)
)


;;; End of file.