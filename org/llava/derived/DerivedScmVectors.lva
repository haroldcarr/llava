;;;; Copyright (c) 1997 - 2004 Harold Carr
;;;;
;;;; This work is licensed under the Creative Commons Attribution License.
;;;; To view a copy of this license, visit 
;;;;   http://creativecommons.org/licenses/by/2.0/
;;;; or send a letter to
;;;;   Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA
;;;;---------------------------------------------------------------------------

;;;;
;;;; Created       : 1998 Dec 06 (Sun) 09:29:56 by Harold Carr.
;;;; Last Modified : 2004 Nov 26 (Fri) 17:05:38 by Harold Carr.
;;;;

(define vector?
  (lambda (x) 
      (if (null? x)
	  false
	  (isArray (getClass x)))))

(define make-vector
  (lambda (k . fill)
    (let ((v (-si 'newInstance 'java.lang.reflect.Array 
		  (-si 'forName 'java.lang.Class "java.lang.Object")
		  k)))
      (if (not (null? fill))
	  (do ((i 0 (+ i 1)))
	      ((>= i k))
	    (vector-set! v i (car fill))))
      v)))

(define vector-length
  (lambda (v) (-si 'getLength 'java.lang.reflect.Array v)))

(define vector-ref
  (lambda (v i) (-si 'get 'java.lang.reflect.Array v i)))

(define vector-set!
  (lambda (v i x) 
    (-si 'set 'java.lang.reflect.Array v i x)
    x))

(define vector->list
  (lambda (v)
    (let ((result '(_%dummy%_)))
      (do ((len (-si 'getLength 'java.lang.reflect.Array v))
	   (i 0 (+ i 1))
	   (rptr result 
		 (begin 
		   (setCdr rptr 
			   (cons (-si 'get 'java.lang.reflect.Array v i) '()))
		   (cdr rptr))))
	  ((>= i len) (cdr result))))))

(define list->vector
  (lambda (l)
    (-si 'toArray 'org.llava.impl.util.List l)))

(-comment-
(isArray (getClass (listFiles (new 'java.io.File "."))))
(vector->list (list->vector '(1 2 3)))
)

;;; End of file.
