;;;; Copyright (c) 1997 - 2004 Harold Carr
;;;;
;;;; This work is licensed under the Creative Commons Attribution License.
;;;; To view a copy of this license, visit 
;;;;   http://creativecommons.org/licenses/by/2.0/
;;;; or send a letter to
;;;;   Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA
;;;;---------------------------------------------------------------------------

;;;;
;;;; Created       : 2000 Jan 18 (Tue) 04:24:10 by Harold Carr.
;;;; Last Modified : 2004 Sep 09 (Thu) 19:38:26 by Harold Carr.
;;;;

;;; REVISIT - gensym let vars

(define-syntax try
  (lambda exprs-catch-finally
    (let ((tryExprs     (_%getTryExpressions     exprs-catch-finally))
	  (catchClauses (_%getCatchClauses       exprs-catch-finally))
	  (finallyExprs (_%getFinallyExpressions exprs-catch-finally)))
      `(_%try
	(lambda () ,@tryExprs)
	(lambda (t)
	  (let ((g2 (if (instanceof t 'org.llava.lang.exceptions.LlavaException)
			(getThrowable t)
			t)))
	    (cond ,@catchClauses
		  (else (throw t)))))
	(lambda () ,@finallyExprs)))))

(define (_%getTryExpressions exprs)
  (_%appendResults (lambda (x) (if (or (not (pair? x)) ; ref ok
				       (and (not (eq? (car x) 'catch))
					    (not (eq? (car x) 'finally))))
				   ;;  extra list level for appendResults
				   `(,x)
				   '()))
		   exprs))

(define (_%getCatchClauses catch-finally)
  (_%appendResults (lambda (x) (if (and (pair? x)
					(eq? (car x) 'catch))
				   `(((instanceof g2 ',(car (cadr x)))
				      (let ((,(cadr (cadr x)) g2)) ,@(cddr x))))
				   '()))
		   catch-finally))

(define (_%getFinallyExpressions catch-finally)
  (_%appendResults (lambda (x) (if (and (pair? x)
					(eq? (car x) 'finally))
				   (cdr x)
				   '()))
		   catch-finally))

;; removes empty lists

(define (_%appendResults proc lst)
  (apply append (map proc lst)))

;;; End of file.

