;;;;
;;;; Created       : 2000 Jan 18 (Tue) 04:24:10 by Harold Carr.
;;;; Last Modified : 2000 Jan 21 (Fri) 20:42:54 by Harold Carr.
;;;;

;;; REVISIT - gensym let vars

(define-syntax try
  (lambda exprs-catch-finally
    (let ((tryExprs     (.%getTryExpressions     exprs-catch-finally))
	  (catchClauses (.%getCatchClauses       exprs-catch-finally))
	  (finallyExprs (.%getFinallyExpressions exprs-catch-finally)))
      `(.%try
	(lambda () ,@tryExprs)
	(lambda (t)
	  (let ((g2 (if (instanceof t 'lava.lang.exceptions.LavaException)
			(getThrowable t)
			t)))
	    (cond ,@catchClauses
		  (else (throw t)))))
	(lambda () ,@finallyExprs)))))

(define (.%getTryExpressions exprs)
  (.%appendResults (lambda (x) (if (or (not (pair? x)) ; ref ok
				       (and (not (eq? (car x) 'catch))
					    (not (eq? (car x) 'finally))))
				   ;;  extra list level for appendResults
				   `(,x)
				   '()))
		   exprs))

(define (.%getCatchClauses catch-finally)
  (.%appendResults (lambda (x) (if (and (pair? x)
					(eq? (car x) 'catch))
				   `(((instanceof g2 ',(car (cadr x)))
				      (let ((,(cadr (cadr x)) g2)) ,@(cddr x))))
				   '()))
		   catch-finally))

(define (.%getFinallyExpressions catch-finally)
  (.%appendResults (lambda (x) (if (and (pair? x)
					(eq? (car x) 'finally))
				   (cdr x)
				   '()))
		   catch-finally))

;; removes empty lists

(define (.%appendResults proc lst)
  (apply append (map proc lst)))

;;; End of file.

