;;;; Copyright (c) 1997 - 2004 Harold Carr
;;;;
;;;; This work is licensed under the Creative Commons Attribution License.
;;;; To view a copy of this license, visit 
;;;;   http://creativecommons.org/licenses/by/2.0/
;;;; or send a letter to
;;;;   Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA
;;;;---------------------------------------------------------------------------

;;;;
;;;; Created       : 2004 Nov 25 (Thu) 14:56:00 by Harold Carr.
;;;; Last Modified : 2004 Dec 22 (Wed) 06:47:12 by Harold Carr.
;;;;

(define-syntax define-d
  (lambda (a b . body)
    (cond ((symbol? a)
	   (cond ((and (pair? b) (eq? (first b) 'lambda))
		  `(define ,a 
		      (lambda ,(second b)
			,(wrap-body a (second b) (cddr b))))) ;; @
		 (else
		  `(define ,a ,b))))
	  (else
	   `(define ,a ,(wrap-body (first a) (rest a) (cons b body)))))))

(define wrap-body
  (lambda (name args body)
    ;;(-println (list 'wrap-body name args body))
    `(let ((_%result%_ null)
	   (_%error%_ false))
       (try
	(begin
	  (print-enter ',name ,@(process-args args))
	  (set! _%result_% (begin ,@body)))
	(catch (java.lang.Throwable t)
	 (set! _%error%_ t)
	 (throw t))
	(finally
	 (print-exit _%error%_ _%result_% ',name ,@(process-args args)))))))

(define process-args
  (lambda (args) 
    (let ((result '(_%dummy%_)))
      (do ((a args (cdr a))
	   (rptr result (begin (setCdr rptr (cons (car a) '()))
			       (cdr rptr))))
	  ((not (pair? a))
	   (if (not (null? a))
	       (setCdr rptr (cons a '())))
	   (cdr result))))))

(define print-enter
  (lambda (name . args)
    (print-indent 'enter)
    (-print "->" )
    (print-common name args)
    (-newline)
    (-flush)))

(define print-exit
  (lambda (error result name . args)
    (print-indent 'exit)
    (-print "<" )
    (-if error (-print "E") (-print "-"))
    (print-common name args)
    (-print "= " )
    (-if error 
	 (-writeln error)
	 (-writeln result))
    (-flush)))


(let ((current-indent 0)
      (indent 1))

  (define set-define-d-indent!
    (lambda (x) (set! indent x)))

  (define print-indent
    (lambda (direction)
      (cond (indent
	     (if (eq? direction 'exit) 
		 (set! current-indent (- current-indent indent)))
	     (do ((i current-indent (- i 1)))
		 ((<= i 0))
	       (-print " "))
	     (if (eq? direction 'enter) 
		 (set! current-indent (+ current-indent indent)))))))

)

(define print-common
  (lambda (name args)
    (-print "(" )
    (-print name)
    (for-each (lambda (a) (-print " " ) (-write a)) args)
    (-print ") ")))

(-comment-
(load (s+ (user-home) "/.sync/.llava.org/.system/org/llava/derived/DerivedLlavaDefineD.lva"))
(define-d (f a n) n)
(define-d (f a . n) n)
(define-d a 3)
(define-d test (lambda (a . opt) (list a opt)))
(define-d (fact n)
  (cond ((<= n 0)
	 (error (s+ "fact: illegal argument: " n)))
	((= n 1) 1)
	((= n 7) (error "XXX"))
	(else
	 (* n (fact (- n 1))))))
(fact 5)
(fact 10)
(fact -1)
(set-define-d-indent! false)
(set-define-d-indent! 3)
(set-define-d-indent! 1)

(define-d (a n . acc)
  (if (= n 0)
      acc
      (a (- n 1) 
	 (+ n (first acc))
	 (* n (second acc)))))
(a 10 0 1)

(define-d b
  (lambda args
    (if (= (first args) 0)
	(rest args)
	(b (- (first args) 1)
	   (+ (first args) (second args))
	   (* (first args) (third args))))))
(b 10 0 1)

(define-d v
  (lambda (vec)
    (cond ((= (vector-ref vec 0) 0) "done")
	  ((= (vector-ref vec 0) -1) (new 'java.lang.Exception "BAD"))
	  (else
	   (vector-set! vec 0 (- (vector-ref vec 0) 1))
	   (v vec)))))
(v #(10 3))
(v #(-1))

)

;;; End of file.
