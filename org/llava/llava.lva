;;;; Copyright (c) 1997 - 2004 Harold Carr
;;;;
;;;; This work is licensed under the Creative Commons Attribution License.
;;;; To view a copy of this license, visit 
;;;;   http://creativecommons.org/licenses/by/2.0/
;;;; or send a letter to
;;;;   Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA
------------------------------------------------------------------------------

;;;;
;;;; Created       : 2004 Sep 05 (Sun) 11:27:57 by Harold Carr.
;;;; Last Modified : 2005 May 16 (Mon) 14:05:36 by Harold Carr.
;;;;

(-package-
 (location org.llava))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(-section- 
 (name "Notation, Terminology and Convections")
 (description
  "<bridgehead> Entry format</bridgehead>

  Each entry describes one language feature (or group) where a
  feature is either a syntactic construct or a procedure.  An entry
  begins with lines of the form"))

(-doc-
 (name template)
 (category category)
 (location location)
 (description
  "where <emphasis>category</emphasis> may be \"syntax\" or
   \"procedure\", and where <emphasis>location</emphasis> specifies
   the package containing the feature.  If the location is
   contained inside <code>(import </code>
   <emphasis>location</emphasis><code>)</code> then the package
   must be imported in order to use the feature.  Otherwise the
   feature is already imported and <emphasis>location</emphasis>
   simply gives the package location of the feature.

   <bridgehead>Evaluation examples</bridgehead>

   The symbol &lva-et; used in program examples should be read
   \"evaluates to.\"  For example,"
  
  (example "(* 5 8)  &lva-et;    40")

  "means that the expression <code>(* 5 8)</code> evalutes to the
   object <code>40</code>.

   <bridgehead>llava file suffix</bridgehead>

   By convention, llava files end with a <code>.lva</code> suffix.
   e.g., <code>foo.lva</code>"))

(-section-end-) ;; Notation
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(-section-
 (name "Creating a Java Object"))

(-doc-
 (name new)
 (param packagePathAndClassName)
 (param obj)
 (param ...)
 (category syntax)
 (location org.llava)
 (description
  "Examples:"
  (example

"(new 'java.util.Date)
(new 'java.lang.Integer 3)")

  "Note: if the class has been imported then you can call
   the constructor directly:"

  (example
"(import java.lang.Integer)
(Integer 3)")

  "or you can use <code>new</code> shorthand:"
  (example
"(new 'Integer 3)")

  "Also note, even though <code>new</code> is syntax, all arguments
   are evaluated."))

(-doc-
 (name new*)
 (param packagePathAndClassName)
 (param obj)
 (param ...)
 (location org.llava)
 (description
  "Like syntax <code>new</code> except it is a procedure and it must be given
  the full package and classname (i.e., it does not accept imported
  shorthand like <code>new</code>)."))

(-section-end-)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(-section-
 (name "Virtual Method Invocation"))

(-doc-
 (name -i)
 (param methodName)
 (param targetObj)
 (param obj)
 (param ...)
 (location org.llava)
 (description
  "Examples:"

  (example "(-i 'getMonth (new 'java.util.Date))")

  "Note, virtual methods may use standard (and preferred) prefix
   generic procedure notation:"

  "(<parameter>methodName</parameter>
    <parameter>targetObj</parameter>
    <parameter>obj ...</parameter>)"

  "If <function>methodName</function> has not been bound or has
   been bound to a generic procedure then this is equivalent
   to:"

  "(-i 
    <parameter>methodName</parameter>
    <parameter>targetObj</parameter>
    <parameter>obj ...</parameter>)"

  "The above example is best written as:"

  (example "(getMonth (new 'java.util.Date))")))
(-section-end-)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(-section-
 (name "Static Method Invocation"))

(-doc-
 (name -si)
 (param methodName)
 (param classOrClassName)
 (param obj)
 (param ...)
 (location org.llava)
 (description
  "Examples:"

  (example
"(-si 'parseInt 'java.lang.Integer \"ff\" 16)")

  "Note, static methods may be called directly after their
   class has been imported.  The above example can then be written:"

  (example
"(import java.lang.Integer)
(parseInt \"ff\" 16)")

  "or"

  (example
"(Integer.parseInt \"ff\" 16)")))

(-section-end-)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(-section-
 (name "Virtual Field Access"))

(-doc-
 (name -f)
 (param fieldName)
 (param targetObj)
 (param optionalSetterValue)
 (location org.llava)
 (description
  "Examples:"
  
  (example
"(-f 'minor (new 'org.omg.CORBA.BAD_PARAM))    ; get
(-f 'minor (new 'org.omg.CORBA.BAD_PARAM) 56) ; set")

  "Note, virtual fields may be accessed directly after their
   class has been imported.  The above example can then be written:"

  (example
"(import org.omg.CORBA.SystemException)
(minor (new 'org.omg.CORBA.BAD_PARAM))
(minor! (new 'org.omg.CORBA.BAD_PARAM) 56)")))

(-section-end-)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(-section-
 (name "Static Field Access"))

(-doc-
 (name -sf)
 (param fieldName)
 (param classOrClassName)
 (param optionalSetterValue)
 (location org.llava)
 (description
  "Examples:"

  (example 
"(-sf 'out 'java.lang.System)   ; get
(-sf 'out 'java.lang.System 0) ; set - and an error since Field is final")

  "Note, static fields may be accessed directly after their
   class has been imported.  The above example can then be witten
   as:"

  (example
"(import java.lang.System)
(out)
(out! 0)")

  "or, preferred"

  (example
"(System.out)")))

(-section-end-)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(-section-
 (name "Generic Procedure Definitions"))

(-doc-
 (name define)
 (param " ( ")
 (param variable)
 (param requiredArg)
 (param ...)
 (param ".")
 (param optionalArg)
 (param " ) ")
 (param body)
 (category syntax)
 (location org.llava)
 (description
  "Binds a procedure to <parameter>variable</parameter> that,
      when called, will first use Java reflection to find a method on
      the first argument that matches the types of the remaining
      arguments.  If one is found it is invoked.  Otherwise
      <parameter>body</parameter> is executed after the arguments are
      bound."

  "Example:"

  (example "(define (name requiredArg1 requiredArg2 . optionalArgs) body)")

  "Defines a generic procedure which, when called as:"

  (example "(name 1 2)")

  "will first try:"

  (example "(-i name 1 2)")

  "If no Java method is found (and invoked) then 
   the generic procedure <parameter>body</parameter> will be called:"

  (example
   "((lambda (requiredArg1 requiredArg2 . optionalArgs) body) 1 2)")

  "Example:"

  (example
"(define (getMessage x)
  (cdr x))

(getMessage '(1 2 3)) &lva-et; (2 3)

(getMessage (new 'java.lang.Exception \"test msg\")) &lva-et; test msg")))

(-section-end-)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(-section-
 (name "Lambda Procedure Definitions"))

(-doc-
 (name define)
 (param variable)
 (param " ( ")
 (param lambda)
 (param " ( ")
 (param requiredArg)
 (param ...)
 (param ".")
 (param optionalArgs)
 (param " ) ")
 (param body)
 (param " ) ")
 (category syntax)
 (location org.llava)
 (description
  "Binds a procedure to <parameter>variable</parameter> that,
      when called, will always execute <parameter>body</parameter>
      after the arguments are bound."

  "Example:"

  (example "(define name (lambda (requiredArg1 requiredArg2 . optionalArgs) body)")

  "defines a generic procedure which, when called as:"

  (example "(name 1 2)")

  "will always call:"

  (example "((lambda (requiredArg1 requiredArg2 . optionalArgs) body) 1 2)")))

(-section-end-)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(-section-
 (name "try/catch/finally and throw")
 (description
  "Example:"
  (example
"(let ((bomb 1))
  (define (demo)
    (try
     (begin
       (if (&lt; bomb 0)
	   (throw (new 'java.lang.RuntimeException \"Give up!\")))
       (list \"Normal result is: \" (/ 2 bomb)))
     (catch (java.lang.ArithmeticException e)
       (list \"Arithmetic: \" e))
     (catch (java.lang.Exception e)
       (list \"Exception: \" e))
     (finally
       (set! bomb (- bomb 1))))))

(demo) &lva-et; (Normal result is:  2)
(demo) &lva-et; (Arithmetic:  java.lang.ArithmeticException: / by zero)
(demo) &lva-et; (Exception:  java.lang.RuntimeException: Give up!)")

   "Note, it is not necessary to give the full classpath in the catch
    clause if the class has been imported."))
(-section-end-)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(-section-
 (name Concurrency)
 (description "Also see <code>org.llava.lib.Thread</code>"))

(-doc-
 (name synchronized)
 (param lock-obj)
 (param expression1)
 (param ...)
 (location org.llava))

(-section-end-)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(-section-
 (name Macros)
 (description
  "Same as Common Lisp. See <code>org.llava.lib.cl.Macro</code>."))

(-section-end-)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(-section-
 (name "package/import Namespaces")
 (description
  "<function>package</function> and <function>import</function>
    create, load and reference namespaces."))

(-doc-
 (name package)
 (param symbol)
 (category syntax)
 (location org.llava)
 (description
  "<function>package</function> creates a namespace with the
   given name if it does not exist."

  "<function>package</function> changes to the named namespace
   such that definitions and references occur with respect to that
   namespace."))

(-doc-
 (name import)
 (param symbol)
 (category syntax)
 (location org.llava)
 (description
  "<function>import</function> searches the roots of
   <code>CLASSPATH</code> for files ending in *<code>.lva</code>
   with the given path and name.  If one is found it is
   loaded."

  "The first form in an imported *.<code>lva</code> file must
   be a <function>package</function> declaration."

  "The namespace of the imported package is added to the end
   of list of namespaces imported into the package current when
   the <function>import</function> statement is evaluated."

  "Variable definitions and references occur with respect to
   the current package.  If the variable is not found in the
   current package the import list is searched in order.  If not
   found in the import list the top-level <code>org.llava</code>
   package is searched last."

  "If <parameter>symbol</parameter> names a
   *<code>.class</code> file instead then it results in generic
   procedure definitions for all virtual methods
   and results in non-generic procedure definitions of
   static methods and fields (both static and virtual):"

  (example
"(import java.lang.System)")

  "then"

  (example
"(java.lang.System.out)")

  "and"

  (example
"(System.out)
	;; both equivalent to (-sf 'out 'java.lang.System)")

  (example
"(import java.lang.Integer)")

  "then"

  (example
"(java.lang.Integer.TYPE)")

  "and"

  (example
"(Integer.TYPE)
	;; both equivalent to (-sf 'TYPE 'java.lang.Integer)")

  (example
"(java.lang.Integer.parseInt \"ff\" 16)")

  "and"

  (example
"(Integer.parseInt \"ff\" 16)
        ;; both equivalent to (-si 'parseInt 'java.lang.Integer \"ff\" 16)")

  "Note: these definitions take places in the current
   package.  In the future this will change such that a llava
   namespace is created, the definitions will be placed in that
   package and that package will be added to the import list of the
   current package."))

(-section-end-)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(-section-
 (name Misc))

(-doc-
 (name instanceof)
 (param obj)
 (param symbol-or-string)
 (location org.llava)
 (description
  "Example:"
  (example
   "(instanceof (new 'java.util.Hashtable) 'java.util.Hashtable) &lva-et; true")
  "Note, like <code>new</code>, the full classpath is not necessary if
  the class has been imported:"

  (example
   "(import java.util.Hashtable)
(instanceof (new 'Hashtable) 'Hashtable) &lva-et; true")))

(-doc-
 (name current-time-millis)
 (location org.llava))

(-section-end-)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(-section-
 (name "Read-Compile-Eval-Print-Loop"))

(-doc-
 (name -bt)
 (location org.llava)
 (description
  "Prints a backtrace of the llava stack for the last
   exception.  Note: the top of the stack is at the bottom of the
   trace."))

(-doc-
 (name -jbt)
 (location org.llava)
 (description
  "Prints a backtrace of the Java stack for the last
   exception.  Note: the top of the stack is at the top of the
   trace."))

(-doc-
 (name define-d)
 (param ...)
 (category syntax)
 (location org.llava)
 (description
  "Equivalent to <code>define</code> when defining generic and lambda
   procedures except procedures defined with <code>define-d</code> print
   procedure entry and exit values to the console.  Exit value tracing
   indicates whether a normal value is returned or an exception has been
   thrown."))

(-doc-
 (name set-define-d-indent!)
 (param false-or-integer)
 (location org.llava)
 (description
  "Controls the indentation of the call stack tracing of procedures
  defined with <code>define-d</code>.  If <code>false</code> then no
  indentation.  Otherwise tracing is indented the integer amount given."))

(-section-end-)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(-section-
 (name Semantics)
 (description
  "llava is statically scoped."
  "llava is dynamically typed."
  "llava is properly tail-recursive."
  "Arguments to llava procedures are passed by value."
  "Like Scheme, llava is a Lisp-1, meaning that functions and
   variables are stored in the same namespaces (which is different
   from Common Lisp, a Lisp-2, which uses different namespaces for
   functions and variables)."))
(-section-end-)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(-section-
 (name Syntax)
 (description
  "llava uses a parenthesized prefix notation for programs and
   (other) data."

  "The <function>-read</function> procedure performs syntactic as
   well as lexical decomposition of the data it reads."))
(-section-end-)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(-section-
 (name "Immutable Syntax")
 (description
  "The following llava syntax (i.e., special forms) is immutable."
  "From (or similar to) Scheme:"
  (example
"begin
define
define-final
lambda
let
letrec
quote
set!")
  
  "From Java:"

  (example "if")))

(-comment-
"Immutable Llava Primitive Procedures (non-generic):

Unique to Llava:

Variables:

.isBound


List:

.car
.cdr
cons
list


Reflection:

.classForName


From Java:

new

=================

Limitations:

You cannot (re)define Java classes.

You cannot locally change factory settings (i.e., all Llava instances
share the static factory methods).
")

(-section-end-)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(-section- 
 (name "Lexical Conventions")
 (description
  "llava is case-sensitive.  For example, <code>Foo</code> is
   <emphasis>not</emphasis> the same identifier as <code>FOO</code>.

   <bridgehead>Identifiers</bridgehead>

   A sequence of letters, digits and \"extended alphabetic
   characters\" is an identifier.  llava's extended
   alphabetic characters are identical with R5RS.

   <bridgehead>Comments</bridgehead>

   A semicolon (<code>;</code>) indicates the start of a
   comment.  The comment continues to the end of the line on which
   the semicolon appears."))

  (-doc-
   (name -comment-)
   (parameter "&lt;expression&gt;")
   (parameter ...)
   (category syntax)
   (location org.llava)
   (description
    "A block comment is anything appearing inside the syntax:
   <code>(-comment- ...)</code>."))

  (-doc-
   (name -package-)
   (parameter "&lt;expression&gt;")
   (parameter ...)
   (category syntax)
   (location org.llava)
   (description
    "A block comment.  Recognized by <code>org.llava.lib.LlavaDoc</code>."))

  (-doc-
   (name -doc-)
   (parameter "&lt;expression&gt;")
   (parameter ...)
   (category syntax)
   (location org.llava)
   (description 
    "A block comment. Recognized by <code>org.llava.lib.LlavaDoc</code>."

   "<bridgehead>Other notations</bridgehead>"

   "<code>. + -</code> Used in numbers and identifiers, as in R5RS."
   "<code>(  )</code> Used for grouping and to notate lists, as in R5RS."
   "<code>'</code> Indicates literal data, as in R5RS."
   "<code>`</code> Indicates almost constant data, as in R5RS."
   "<code>, ,@</code> Used in conjunction with backquote, as in R5RS."
   "<code>\"</code> Used to delimit strings, as in R5RS."
   "<code>\\</code> Used in character constants and as an escape within string constants, as in R5RS."
   "<code>true false</code> These are the boolean constants."
   "<code>#\\</code> Introduces a character constants, as in R5RS."
   "<code>#(</code> Introduces a vector constant, as in R5RS."))

(-section-end-) ; Lexical Conventions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(-section- (name "Expressions"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(-section- 
 (name "Primitive Expression Types")
 (description
  "&lt;variable&gt;"
  "-- syntax"
  "An expression consisting of a identifier is a variable reference."))

(-comment-
 "Cannot use -doc- for variable because it comes out (variable) 
  - ie with parenthesis")

(-doc-
 (name quote)
 (category syntax)
 (param "&lt;datum&gt;")
 (location org.llava))

(-doc-
 (name "&lt;operator&gt;")
 (param "&lt;operand1&gt;")
 (param ...)
 (category syntax)
 (location org.llava)
 (description "A procedure call."))

(-doc-
 (name lambda)
 (param "&lt;formals&gt;")
 (param "&lt;body&gt;")
 (category syntax)
 (location org.llava)
 (description "A procedure definition."))

(-doc-
 (name if)
 (param "&lt;test&gt;")
 (param "&lt;consequent&gt;")
 (param "&lt;optional-alternate&gt;")
 (category syntax)
 (location org.llava))

(-doc-
 (name set!)
 (param "&lt;variable&gt;")
 (param "&lt;expression&gt;")
 (category syntax)
 (location org.llava))

(-doc-
 (name begin)
 (param "&lt;expression1&gt;")
 (param "&lt;expression2&gt;")
 (param ...)
 (category syntax)
 (location org.llava))

(-doc-
 (name quasiquote)
 (param "&lt;pp template&gt;")
 (category syntax)
 (description "Backquote.  Use <code>` ,</code> and <code>,@</code>")
 (location org.llava))

(-section-end-)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(-section- (name "Derived Conditionals"))

(-doc-
 (name cond)
 (param ...)
 (category syntax)
 (location org.llava))

(-doc-
 (name or)
 (param ...)
 (category syntax)
 (location org.llava))

(-doc-
 (name and)
 (param ...)
 (category syntax)
 (location org.llava))

(-doc-
 (name case)
 (param ...)
 (category syntax)
 (location org.llava))

(-doc-
 (name try)
 (param "&lt;body&gt;")
 (param "&lt;catch&gt;")
 (param "&lt;finally&gt;")
 (category syntax)
 (location org.llava)
 (description 
  "Example: "
  (example
"(try
 (/ 1 0)
 (catch (java.lang.Throwble t)
   (-print (s+ \"Caught: \" (toString t))))
 (finally
   (-print \"finally\")))")))

(-section-end-)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(-section- (name "Binding Constructs"))

(-doc-
 (name let)
 (param ...)
 (category syntax)
 (location org.llava))

(-doc-
 (name let*)
 (param ...)
 (category syntax)
 (location org.llava))

(-doc-
 (name letrec)
 (param ...)
 (category syntax)
 (location org.llava))

(-section-end-)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(-section- (name "Iteration"))

(-doc-
 (name do)
 (param ...)
 (category syntax)
 (location org.llava))

(-section-end-)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(-section-end-) ; Expressions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(-section- (name "Procedures"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(-section- (name "Equivalence Predicates"))

(-doc-
 (name eq?)
 (param obj1)
 (param obj2)
 (location org.llava)
 (description
  "Equivalent to Java <code>==</code>."

  "Handles <code>null</code> arguments."))

(-doc-
 (name equal?)
 (param obj1)
 (param obj2)
 (location org.llava)
 (description
  "Equivalent to Java <code>equals</code>."

  "Handles <code>null</code> arguments."

  "Handles vector arguments."))

(-section-end-)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(-section- (name "Numbers"))

(-doc-
 (name =)
 (param z1)
 (param z2)
 (param z3)
 (param ...)
 (location org.llava))

(-doc-
 (name "&lt;")
 (param x1)
 (param x2)
 (param x3)
 (param ...)
 (location org.llava))

(-doc-
 (name "&gt;")
 (param x1)
 (param x2)
 (param x3)
 (param ...)
 (location org.llava))

(-doc-
 (name "&lt;=")
 (param x1)
 (param x2)
 (param x3)
 (param ...)
 (location org.llava))

(-doc-
 (name "&gt;=")
 (param x1)
 (param x2)
 (param x3)
 (param ...)
 (location org.llava))

(-doc-
 (name +)
 (param z1)
 (param ...)
 (location org.llava))

(-doc-
 (name *)
 (param z1)
 (param ...)
 (location org.llava))

(-doc-
 (name -)
 (param z1)
 (param ...)
 (location org.llava))

(-doc-
 (name /)
 (param z1)
 (param ...)
 (location org.llava))

(-doc-
 (name modulo)
 (param n1)
 (param n2)
 (location org.llava))

(-doc-
 (name |)
 (param n1)
 (param n2)
 (param ...)
 (location org.llava)
 (description "Bitwise OR."))

(-doc-
 (name "&amp;")
 (param n1)
 (param n2)
 (param ...)
 (location org.llava)
 (description "Bitwise AND."))

(-section-end-)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(-section- (name "Booleans"))

(-doc-
 (name not)
 (param obj)
 (location org.llava))

(-section-end-)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(-section- (name "Pairs and Lists"))

(-doc-
 (name pair?)
 (param obj)
 (location org.llava))

(-doc-
 (name cons)
 (param obj1)
 (param obj2)
 (location org.llava))

(-doc-
 (name car)
 (param pair)
 (location "reflect on Pair"))

(-doc-
 (name cdr)
 (param pair)
 (location "reflect on Pair"))

(-doc-
 (name -car)
 (param pairOrNull)
 (location org.llava)
 (description
  "Like <code>car</code> except returns <code>null</code>
   if given <code>null</code>."))

(-doc-
 (name -cdr)
 (param pairOrNull)
 (location org.llava)
 (description
  "Like <code>cdr</code> except returns <code>null</code>
   if given <code>null</code>."))

(-doc-
 (name setCar)
 (param pair)
 (location "reflect on Pair"))

(-doc-
 (name setCdr)
 (param pair)
 (location "reflect on Pair"))

(-doc-
 (name c????r)
 (param pair)
 (location "reflect on Pair")
 (description
  "car, cdr, caar, cadr, cdar, cddr, caddr, cdddr"))

(-doc-
 (name first)
 (param list)
 (location "reflect on Pair")
 (description
  "rest, first, second, third, fourth, firth, sixth"))

(-doc-
 (name null?)
 (param obj)
 (location org.llava))

(-doc-
 (name list)
 (param obj)
 (param ...)
 (location org.llava))

(-doc-
 (name -list)
 (param obj)
 (param ...)
 (location org.llava)
 (description 
   "Alias for <function>list</function>.  Useful to circumvent generic
    procedures."
   (example "(-list (new 'java.io.File \"/tmp\")) &lva-et; (/tmp)")))

(-doc-
 (name length)
 (param list)
 (location "reflect on Pair"))

(-doc-
 (name append)
 (param list)
 (param ...)
 (location org.llava))

(-doc-
 (name memq)
 (param obj)
 (param list)
 (location org.llava))

(-doc-
 (name member)
 (param obj)
 (param list)
 (location org.llava))

(-section-end-)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(-section- (name "Symbols"))

(-doc-
 (name symbol?)
 (param obj)
 (location org.llava))

(-doc-
 (name string->symbol)
 (param string)
 (location org.llava))

(-section-end-)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(-section- (name "Strings"))

(-doc-
 (name string-append)
 (param string)
 (param ...)
 (location org.llava))

(-doc-
 (name s+)
 (param string)
 (param ...)
 (location org.llava)
 (description "Alias for <function>string-append</function>"))

(-doc-
 (name string->symbol)
 (param string)
 (location org.llava))

(-section-end-)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(-section- (name "Vectors"))

(-doc-
 (name vector?)
 (param obj)
 (location org.llava))

(-doc-
 (name make-vector)
 (param k)
 (param ".")
 (param optionalFill)
 (location org.llava))

(-doc-
 (name vector)
 (param obj)
 (param ...)
 (location org.llava))

(-doc-
 (name vector-length)
 (param vector)
 (location org.llava))

(-doc-
 (name vector-ref)
 (param vector)
 (param k)
 (location org.llava))

(-doc-
 (name vector-set!)
 (param vector)
 (param k)
 (param obj)
 (location org.llava))

(-doc-
 (name vector->list)
 (param vector)
 (location org.llava))

(-doc-
 (name list->vector)
 (param vector)
 (location org.llava))

(-section-end-)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(-section- (name "Control Features"))

(-doc-
 (name apply)
 (param proc)
 (param list)
 (location org.llava))

(-doc-
 (name map)
 (param proc)
 (param list)
 (param ".")
 (param optionalList)
 (param ...)
 (location org.llava)
 (description
  "Examples:"
  (example "(map (lambda (x) (+ x 1)) '(1 2 3)) &lva-et; (2 3 4)")
  (example "(map (lambda (x y) (+ x y)) '(1 2 3) '(0.1 0.2 0.3)) &lva-et; (1.1 2.2 3.3)")))

(-doc-
 (name for-each)
 (param proc)
 (param list)
 (param ".")
 (param optionalList)
 (param ...)
 (location org.llava)
 (description
  "Like <code>map</code> but does not collect results in a list."))

(-doc-
 (name call/cc)
 (param proc)
 (location org.llava)
 (description "Only downward continuations supported."))


(-doc-
 (name eval)
 (param expression)
 (location org.llava))

(-section-end-)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(-section- (name "Input and Output"))

(-doc-
 (name -read)
 (param " . ")
 (param optional-java.io.Reader)
 (location org.llava)
 (description
  "Reader that understands llava data types.  Reads from <code>stdin</code>
  or the optional <code>Reader</code> argument."))

(-doc-
 (name eof-object?)
 (param obj)
 (location org.llava)
 (description
  "Returns <code>true</code> if given an end-of-file read by 
   <code>read</code>."))

(-doc-
 (name load)
 (param string)
 (location org.llava)
 (description 
  "Given a filename (relative or absolute), reads and evaluates the contents
   of the file with respect to the current package."))

(-doc-
 (name -write)
 (param obj)
 (param " . ")
 (param optional-java.io.PrinterWriter)
 (location org.llava)
 (description
  "Equivalent to Java <code>print</code> except for special treatment
   of <code>String</code>, <code>Character</code>, vectors and 
   <code>quasiquote</code>"
  "Examples:"
  (example "(write '(\"foo\" #\\c #(1 2))) prints (\"foo\" #\\c #(1 2))")))

(-doc-
 (name -writeln)
 (param obj)
 (param " . ")
 (param optional-java.io.PrinterWriter)
 (location org.llava)
 (description
  "Equivalent to <code>-write</code> followed by <code>-newline</code>."))

(-doc-
 (name set-vector-print-length!)
 (param booleanOrInteger)
 (location org.llava)
 (description 
  "Controls the number of vector elements printed.
  <code>true</code> means all.
  <code>false</code> means 0."))

(-doc-
 (name -print)
 (param obj)
 (param " . ")
 (param optional-java.io.PrinterWriter)
 (location org.llava)
 (description 
  "Equivalent to Java <code>print</code>"
  "Examples:"
  (example "(-print '(\"foo\" #\\c #(1 2))) prints (foo c [Ljava.lang.Object;@988707)")))

(-doc-
 (name -println)
 (param " . ")
 (param optional-obj)
 (param optional-java.io.PrinterWriter)
 (location org.llava)
 (description 
  "Equivalent to <code>-print</code> followed by <code>-newline</code>."
  "If called with no arguments it is equivalent to <code>-newline</code>."))

(-doc-
 (name -newline)
 (param " . ")
 (param optional-java.io.PrinterWriter)
 (location org.llava))

(-doc-
 (name -flush)
 (param " . ")
 (param optional-java.io.PrinterWriter)
 (location org.llava))

(-section-end-)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(-section-end-) ; Procedures
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; End of file.
