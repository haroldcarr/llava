;;;; Copyright (c) 1997 - 2004 Harold Carr
;;;;
;;;; This work is licensed under the Creative Commons Attribution License.
;;;; To view a copy of this license, visit 
;;;;   http://creativecommons.org/licenses/by/2.0/
;;;; or send a letter to
;;;;   Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA
;;;;---------------------------------------------------------------------------

;;;;
;;;; Created       : 2001 Mar 06 (Tue) 15:09:50 by Harold Carr.
;;;; Last Modified : 2005 Feb 16 (Wed) 14:09:26 by Harold Carr.
;;;;

(package org.llava.lib.xml.L2X)

(import org.llava.lib.cl.Control) ; dotimes
(import org.llava.lib.io.FileWalker)

(-package- 
 (description
  "Transform a \"lispy\" version of XML (called \"lxml\") into angle bracket
   xml."))

(define l->x-indent-amount 2)  ;; Used if indent is true.

(define new-L->X
  (lambda ()
    (let ((fw (new-FileWalker)))
      (set-dispatcher! fw l->x-dispatcher)
      ;; Make newline and indent false by default so "mailto" attributes do not
      ;; end up with space in them.  Turn to true for development.
      (set-newline?! fw false)
      (set-indent?! fw false)
      fw)))

;;;;
;;;; --------------------------------------------------
;;;; LXML -> XML
;;;;

(-doc-
 (name "l-&gt;x"))

;;;
;;; The main interactive routine.
;;; Given an LXML expression, prints it out as XML.
;;;

(define l->x
  (lambda (fw lxml)
    (file-walker-with-indent fw lxml 0)))

(define l->x-dispatcher
  (lambda (fw sexpr indent)
    (if (not (pair? sexpr))
	(l->x-printText fw sexpr)
	(case (car sexpr)
	  ((?)   (l->x-printProcessingInstruction fw sexpr indent))
	  ((!)   (-println (string-append "ignoring: " (toString sexpr))))
	  ((!DOCTYPE)
                 (l->x-printDOCTYPE fw sexpr indent))
	  ((!CDATA)
                 (l->x-printCDATA fw sexpr indent))
	  ((!--) (l->x-printComment fw sexpr indent))
	  ((&&)  (l->x-printEntity fw sexpr indent))
	  (else  (l->x-printElement fw sexpr indent))))))

(define l->x-printElement
  (lambda (fw element indent)
    (let* ((hasAttributes (and (not (null? (cdr element)))
			       (pair? (cdr element))
			       (pair? (cadr element))
			       (equals '@ (car (cadr element)))))
	   (name (car element))
	   (attributes (if hasAttributes (cdr (cadr element)) null))
	   (body (if hasAttributes (cddr element) (cdr element))))
      (file-walker-newline fw)
      (file-walker-indent fw indent)
      (file-walker-print fw "<")
      (file-walker-print fw name)
      (l->x-printAttributes fw attributes)
      (cond ((null? body)
	     (file-walker-print fw "/>"))
	    (else
	     (file-walker-print fw ">")
	     (file-walker-with-indent fw body (+ indent l->x-indent-amount))
	     (file-walker-print fw "</")
	     (file-walker-print fw name)
	     (file-walker-print fw ">"))))))

(define l->x-printEntity
  (lambda (fw entity indent)
    (file-walker-print fw " &")
    (file-walker-print fw (cadr entity))
    (file-walker-print fw "; ")))

(define l->x-printProcessingInstruction
  (lambda (fw pi indent)
    ;; XML declaration must be on first line.
    (if (not (equals 'xml (cadr pi)))
	(file-walker-newline fw))
    (file-walker-indent fw indent)
    (file-walker-print fw "<?")
    (file-walker-print fw (cadr pi))
    (l->x-printAttributes fw (cddr pi))
    (file-walker-print fw "?>")))

(define l->x-printAttributes
  (lambda (fw attributes)
    (do ((atts attributes (cdr atts)))
	((null? atts))
      (file-walker-print fw " ")
      (file-walker-print fw (caar atts))
      (file-walker-print fw "=")
      (file-walker-print fw "\"")
      (file-walker-print fw (car (cdar atts)))
      (file-walker-print fw "\""))))

(define l->x-printText 
  (lambda (fw text)
    (file-walker-print fw text)))

(define l->x-printComment
  (lambda (fw comment indent)
    (file-walker-newline fw)
    (file-walker-indent fw indent)
    (file-walker-print fw "<!-- ")
    (for-each (lambda (c) (file-walker-print fw c)) (cdr comment))
    (file-walker-print fw " -->")))

(define l->x-printDOCTYPE
  (lambda (fw doctype indent)
    (file-walker-newline fw)
    (file-walker-indent fw indent)
    (file-walker-print fw "<!DOCTYPE")
    (do ((d (cdr doctype)            (cdr d))
	 (s '(false false true true) (cdr s)))
	((null? d))
      (file-walker-print fw " ")
      (if (car s) (file-walker-print fw "\""))
      (file-walker-print fw (car d))
      (if (car s) (file-walker-print fw "\"")))
    (file-walker-print fw ">")))

(define l->x-printCDATA
  (lambda (fw cdata indent)
    (file-walker-newline fw)
    (file-walker-indent fw indent)
    (file-walker-print fw "<![CDATA[")
    (file-walker-print fw (cadr cdata))
    (file-walker-print fw "]]>")))

;;;
;;; Strings, Streams and files.
;;;

(-doc-
 (name "l-&gt;x-string"))

(define l->x-string
  (lambda (fw lxml)
    (file-walker-string fw lxml)))

(-doc-
 (name "l-&gt;x-files"))

(define l->x-files
  (lambda (inFileName outFileName)
    (l->x-files* (new-L->X) inFileName outFileName)))

(define l->x-files*
  (lambda (fw inFileName outFileName)
    (file-walker-files fw inFileName outFileName)))

;;;;
;;;; --------------------------------------------------
;;;; XML -> LXML
;;;;

;;; Based on _Java and XML_, Chapter 8, pp 210-211.

(define x->l
  (lambda (uri . out)
    (apply x->l-aux `(DOM LXML ,uri ,@out))))

(define x->l-aux
  (lambda (builderType outputterType uri . out)
    (set! out (if (null? out) 
		  (-sf 'out 'java.lang.System)
		  (x->l-normalize-output-type (car out))))
    (let* ((builder (case builderType
		      ;; p 210.
		      ((SAX) (new 'org.jdom.input.SAXBuilder false))
		      ;; p 211.
		      ((DOM) (new 'org.jdom.input.DOMBuilder
				  "org.jdom.adapters.XercesDOMAdapter"))
		      (else  (error (string-append "unknown: " builderType)))))
	   ;; p 211.
	   (doc (build builder (new 'java.io.File uri))))
      (x->l-printDocument outputterType doc out))))

;; p 223.
(define x->l-printDocument
  (lambda (outputterType doc out)
    (let ((fmt (case outputterType
		 ;; p 223.
		 ((XML)  (new 'org.jdom.output.XMLOutputter))
		 ;; HC extension.
		 ((LXML) (new 'org.jdom.output.LXMLOutputter)))))
      (setSuppressDeclaration fmt false)
      (setOmitEncoding fmt false)
      (setNewlines fmt false)
      (setPadText fmt true)
      (setTrimText fmt false)
      (setExpandEmptyElements fmt true) ;; This one is necessary for LXML
      (output fmt doc out))))

(define x->l-normalize-output-type
  (lambda (out)
    (cond ((equal? (getName (getClass out)) "java.lang.String")
	   (new 'java.io.PrintStream
		(new 'java.io.FileOutputStream out)))
	  (else
	   ;; Assume it is already what is needed.
	   out))))

;;;;
;;;; --------------------------------------------------
;;;; Test.
;;;;

(define (demoRoot tail)
  (string-append (userHome)
		 "/.sync/.lsync/llava/lib/xml/"
		 tail))

(-comment-

(load "L2X.lva")

(dprint? true)
(l->x-string '((? xml (version "1.0") (encoding "UTF-8"))))
(file-walker-out)
;; compare with "./junk.xslt"
(file-walker-newline? true)
(file-walker-indent? true)
(l->x-files "./example.lxsl" "/tmp/junk.xslt")
(l->x-files (demoRoot "xsltBook/me/03Example/bookings.lxml")
	    "/tmp/bookings.xml")
(l->x-files (string-append (userHome) "/.sync/.ksync/rpt/carrEstimates.lxml")
	    "/tmp/carrEstimates.xml")

(x->l (demoRoot "test.xml"))
(x->l-aux 'DOM 'LXML (demoRoot "test.xml"))
;; Must be connected to specs.
(x->l (demoRoot "specs/REC-xml-20001006.xml"))
(x->l "/export/home/carr/InteropTest.wsdl")

)


;;; End of file.
