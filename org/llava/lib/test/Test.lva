;;;; Copyright (c) 1997 - 2004 Harold Carr
;;;;
;;;; This work is licensed under the Creative Commons Attribution License.
;;;; To view a copy of this license, visit 
;;;;   http://creativecommons.org/licenses/by/2.0/
;;;; or send a letter to
;;;;   Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA
;;;;---------------------------------------------------------------------------

;;;
;;; Created       : 1999 Dec 25 (Sat) 22:10:35 by Harold Carr.
;;; Last Modified : 2005 Jun 25 (Sat) 14:46:02 by Harold Carr.
;;;

(package org.llava.lib.test.Test)

(-package- (description "llava test utilities."))

;;;
;;; check
;;;

(-doc-
 (name check)
 (name string-message)
 (name object-should-be)
 (name object-is))

(define (check msg shouldBe is)
  (-si 'check 'test.Test (toString msg) shouldBe is)
  'ok)

;;;
;;; begin-test
;;;

(-doc-
 (name begin-test)
 (param optional-symbol-or-string))

(define begin-test
  (lambda args
    (-if (not (null? args))
	 (println (-sf 'out 'java.lang.System) 
		  (string-append (toString (car args)) "->: " )))
    (-si 'beginTest 'test.Test)))

;;;
;;; end-test
;;;

(-doc-
 (name end-test)
 (param optional-symbol-or-string))

(define end-test
  (lambda args
    (-if (not (null? args))
	 (print (-sf 'out 'java.lang.System) 
		(string-append (toString (car args)) "<-: ")))
    (-si 'endTest 'test.Test)))

;;;
;;; throw-exception-if-failures
;;;

(-doc-
 (name throw-exception-if-failures))

(define throw-exception-if-failures
  (lambda args
    (-si 'throwExceptionIfFailures 'test.Test)))

;;;
;;; exit-if-failures
;;;

(-doc-
 (name exit-if-failures))

(define exit-if-failures
  (lambda args
    (-si 'throwExceptionIfFailures 'test.Test)))

;;;
;;; tprintln
;;;

(-doc-
 (name tprintln)
 (param obj)
 (description
  "testBuiltins cannot use -println because it is running a llava that
   is not connected to System.out."))

(define (tprintln x)
  (println (-sf 'out 'java.lang.System) x)
  x)

;;;
;;; dprintln
;;;

(-doc-
 (name dprintln)
 (param obj))

(define (dprintln x)
  (if (-sf 'printProgress 'test.Test)
      (println (-sf 'out 'java.lang.System) x)
      null)
  x)

;;;
;;; toggle-print-results
;;;

(-doc-
 (name toggle-print-results))

(define toggle-print-results 
  (lambda ()
    (-sf 'printResults 'test.Test 
	 (not (-sf 'printResults  'test.Test)))))

;;;
;;; toggle-print-progress
;;;

(-doc-
 (name toggle-print-progress))

(define toggle-print-progress
  (lambda ()
    (-sf 'printProgress 'test.Test
	 (not (-sf 'printProgress 'test.Test)))))

;(toggle-print-results)
;(toggle-print-progress)

;;; End of file.
