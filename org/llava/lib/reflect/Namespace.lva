;;;; Copyright (c) 1997 - 2004 Harold Carr
;;;;
;;;; This work is licensed under the Creative Commons Attribution License.
;;;; To view a copy of this license, visit 
;;;;   http://creativecommons.org/licenses/by/2.0/
;;;; or send a letter to
;;;;   Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA
;;;;---------------------------------------------------------------------------

;;;;
;;;; Created       : 2004 Aug 27 (Fri) 18:33:43 by Harold Carr.
;;;; Last Modified : 2004 Dec 03 (Fri) 13:56:21 by Harold Carr.
;;;;

(package org.llava.lib.NamespaceUtil)

(import org.llava.lib.Lists) ; for build-list

(-package- 
 (description 
  "Procedures for looking at package namespaces and their contents."))


;;; Bootstrap - need to get a namespace object.
;;; Do not want to change namespace so just use this one.
(set! _%boot (package org.llava.lib.NamespaceUtil))

;;;
;;; list-packages
;;;

(-doc-
 (name list-packages)
 (description "Returns a list of package names for all packages that exist."))

(define list-packages 
  (lambda ()
    (_%list-keys (keySet (-f 'fullNameNamespaceMap (-f 'classVariables _%boot))))))

;;;
;;; current-package
;;;

(-doc-
 (name current-package)
 (description "Returns the name of the current package."))

(define current-package
  (lambda ()
    (getName (-f 'currentNamespace (-f 'classVariables _%boot)))))

;;;
;;; find-package 
;;;

(-doc-
 (name find-package)
 (param symbol-or-string)
 (description 
  "Given a package name. 
   Returns matching package or null if it does not exist."))

(define find-package
  (lambda (name)
    (findNamespace _%boot (toString name))))

;;;
;;; list-imports
;;;

(-doc-
 (name list-imports)
 (param optional-symbol-or-string)
 (description
  "Given a package or package name.
   If no argument is given then uses the current package.
   Returns a list of package names imported into that package in search order."))

(define list-imports
  (lambda ns
      (let* ((NS         (_%handle_argument ns))
	     (i          (iterator (-f 'refList NS)))
	     (terminate? (lambda () (not (hasNext i))))
	     (step       (lambda () (getName (next i)))))
	(build-list terminate? step))))

;;;
;;; list-variables
;;;

(-doc-
 (name list-variables)
 (param optional-symbol-or-string)
 (description
  "Given a package or package name.
   If no argument is given then uses the current package.
   Returns a list of variable names contained in that package."))

;; REVISIT : If you start llava, import this package, then call list-variables
;; with no arguments you get: Error: java.util.ConcurrentModificationException
;; Plus the list contains ids such as setCdr, getName, findNamespace -
;; why are they there?

(define list-variables 
  (lambda ns
    (_%list-keys (keySet (-f 'map (_%handle_argument ns))))))

;;;
;;; contains?
;;;

(-doc-
 (name contains?)
 (param symbol-or-string)
 (param optional-symbol-or-string)
 (description
  "Given a variable name and an optional package or package name.
   Returns <code>true</code> if that variable exists in the given package.
   Otherwise <code>false</code>."))

(define contains? 
  (lambda (name . ns)
    (if (not (member (toString name)
		     (list-variables (getName (_%handle_argument ns)))))
	false
	true)))

;;;
;;; which
;;;

(-doc-
 (name which-package)
 (name symbol-or-string)
 (description
  "Given a variable name.
   Returns the package name in which it exists if that package is
   imported by the current package.
   Otherwise <code>false</code>."))

(define which-package
  (lambda (var-name)
    (do ((result false (-if (member (toString var-name)
				    (list-variables (car packages)))
			    (car packages)
			    false))
	 (packages (list-imports (current-package)) (cdr packages)))
	((or result (null? packages)) result))))


;;;
;;; which-package-all
;;;

(-doc-
 (name which-package-all)
 (param symbol-or-string)
 (description
  "Given a variable name.
   Returns a list of package names for all packages that contain
   a variable of the given name."))

(define which-package-all
  (lambda (var-name)
    (do ((result   '() (-if (member (toString var-name)
				    (list-variables (car packages)))
			    (cons (car packages) result)
			    result))
	 (packages (list-packages) (cdr packages)))
	((null? packages) result))))

;; //////////////////////////////////////////////////
;; // Implementation
;; //

(define _%handle_argument
  (lambda (ns)
    (let ((NS (cond ((null? ns) (find-package (current-package)))
		    ((not (isInstance (getClass _%boot) (car ns)))
		     (find-package (car ns)))
		    (else (car ns)))))
      (if (null? NS)
	  (error (s+ "Not a valid package or package name: " (toString ns))))
      NS)))

(define _%list-keys
  (lambda (keySet)
      (let* ((i          (iterator keySet))
	     (terminate? (lambda () (not (hasNext i))))
	     (step       (lambda () (next i))))
	(build-list terminate? step))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Test
;;;

(-comment-

(import org.llava.lib.NamespaceUtil)
(which-package-all '+)

(-f 'map _%boot)
(-f 'refList _%boot)
(-f 'refList (find-package 'org.llava))
(-f 'map (find-package 'org.llava))

(list-imports _%boot)

(list-variables 'org.llava)

(contains? '+)
(contains? '+ 'org.llava)
(contains? 'hc 'org.llava)

(-f 'classVariables (find-package 'org.llava))
(-f 'fullNameNamespaceMap (-f 'classVariables (find-package 'org.llava)))

(list-packages)

(import org.llava.lib.Reflect)

(display-object (find-package 'org.llava))
(display-object (-f 'classVariables (find-package 'org.llava)))
(display-object (-f 'fullNameNamespaceMap (-f 'classVariables (find-package 'org.llava))))
)

;;; End of file.


