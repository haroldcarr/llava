;;;;
;;;; Created       : 2004 Aug 27 (Fri) 18:33:43 by Harold Carr.
;;;; Last Modified : 2004 Dec 03 (Fri) 13:56:21 by Harold Carr.
;;;;

(package org.llava.lib.NamespaceUtil)

(import org.llava.lib.Lists) ; for build-list

;;; Bootstrap - need to get a namespace object.
;;; Do not want to change namespace so just use this one.
(set! _%boot (package org.llava.lib.NamespaceUtil))

;; list-packages
;;   returns a list of package names for all packages that exist

(define list-packages 
  (lambda ()
    (_%list-keys (keySet (_f 'fullNameNamespaceMap (_f 'classVariables _%boot))))))

;; current-package
;;   returns the name of the current package

(define current-package
  (lambda ()
    (getName (_f 'currentNamespace (_f 'classVariables _%boot)))))

;; find-package 
;;   given a package name
;;   returns matching package or null if it does not exist

(define find-package
  (lambda (name)
    (findNamespace _%boot (toString name))))

;; list-imports
;;   given a package or package name
;;   if no argument is given then uses the current package
;;   returns a list of package names imported into that package
;;     in search order

(define list-imports
  (lambda ns
      (let* ((NS         (_%handle_argument ns))
	     (i          (iterator (_f 'refList NS)))
	     (terminate? (lambda () (not (hasNext i))))
	     (step       (lambda () (getName (next i)))))
	(build-list terminate? step))))

;; list-variables
;;   given a package or package name
;;   if no argument is given then uses the current package
;;   returns a list of variable names contained in that package

;; REVISIT : If you start llava, import this package, then call list-variables
;; with no arguments you get: Error: java.util.ConcurrentModificationException
;; Plus the list contains ids such as setCdr, getName, findNamespace -
;; why are they there?

(define list-variables 
  (lambda ns
    (_%list-keys (keySet (_f 'map (_%handle_argument ns))))))

;; contains?
;;   given a variable name and a package or package name
;;   returns true if that variable exists in the given package, otherwise false

(define contains? 
  (lambda (name . ns)
    (if (not (member (toString name)
		     (list-variables (getName (_%handle_argument ns)))))
	false
	true)))

;; which
;;   given a variable name
;;   returns the package name in which it exists if that package is
;;     imported by the current package, otherwise false

(define which
  (lambda (var-name)
    (let ((import-list (list-imports (current-package))))
      import-list)))

;; which-all
;;   given a variable name
;;   returns a list of package names for all packages that contain
;;     a variable of the given name

;; //////////////////////////////////////////////////
;; // Implementation
;; //

(define _%handle_argument
  (lambda (ns)
    (let ((NS (cond ((null? ns) (find-package (current-package)))
		    ((not (isInstance (getClass _%boot) (car ns)))
		     (find-package (car ns)))
		    (else (car ns)))))
      (if (null? NS)
	  (error (s+ "Not a valid package or package name: " (toString ns))))
      NS)))

(define _%list-keys
  (lambda (keySet)
      (let* ((i          (iterator keySet))
	     (terminate? (lambda () (not (hasNext i))))
	     (step       (lambda () (next i))))
	(build-list terminate? step))))

(-comment-

(import org.llava.lib.NamespaceUtil)

(_f 'map _%boot)
(_f 'refList _%boot)
(_f 'refList (find-package 'org.llava))
(_f 'map (find-package 'org.llava))

(list-imports _%boot)

(list-variables 'org.llava)

(contains? '+)
(contains? '+ 'org.llava)
(contains? 'hc 'org.llava)

(_f 'classVariables (find-package 'org.llava))
(_f 'fullNameNamespaceMap (_f 'classVariables (find-package 'org.llava)))

(list-packages)

(import org.llava.lib.Reflect)

(display-object (find-package 'org.llava))
(display-object (_f 'classVariables (find-package 'org.llava)))
(display-object (_f 'fullNameNamespaceMap (_f 'classVariables (find-package 'org.llava))))
)

;;; End of file.


