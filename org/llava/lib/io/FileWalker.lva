;;;; Copyright (c) 1997 - 2004 Harold Carr
;;;;
;;;; This work is licensed under the Creative Commons Attribution License.
;;;; To view a copy of this license, visit 
;;;;   http://creativecommons.org/licenses/by/2.0/
;;;; or send a letter to
;;;;   Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA
;;;;---------------------------------------------------------------------------

;;;;
;;;; Created       : 2001 Mar 06 (Tue) 15:09:50 by Harold Carr.
;;;; Last Modified : 2005 Feb 19 (Sat) 12:09:35 by Harold Carr.
;;;;

(package org.llava.lib.io.FileWalker)

(import org.llava.lib.SimpleRecord)
(import org.llava.lib.cl.Control) ; dotimes
(import org.llava.lib.cl.Symbols) ; gensym

(-package-
 (description "Generic procedures to walk the contents of a file."))

;;;
;;; When using this package you need to set the dispatcher
;;; (and optionally the header/footer printers.
;;;

(define-simple-record state
  dispatcher 
  print-header
  print-footer
  out
  newline?
  indent?)

(define new-FileWalker
  (lambda ()
    (make-state
     (lambda (fw sexpr indent) (error "You must set-file-walker-dispatcher!"))
     (lambda (fw out inFileName outFilename) null)
     (lambda (fw out inFileName outFilename) null)
     (new 'java.io.PrintWriter (-sf 'out 'java.lang.System))
     true
     true)))

(define file-walker-with-indent
  (lambda (fw sexprs indent)
    (for-each (lambda (sexpr) ((get-dispatcher fw) fw sexpr indent))
	      sexprs)))

(define file-walker-string
  (lambda (fw sexprs)
    (let* ((sw (new 'java.io.StringWriter))
	   (pw (new 'java.io.PrintWriter sw))
	   (savedOut (get-out fw)))
      (try
       (begin
	 (set-out! fw pw)
	 (file-walker-with-indent fw sexprs 0)
	 (toString sw))
       (finally
	(set-out! fw savedOut))))))

;;;
;;; file-walker-files
;;;

(-doc-
 (name file-walker-files)
 (param input-filename)
 (param output-filename)
 (description "..."))

(define file-walker-files
  (lambda (fw inFileName outFileName)
    (let ((inStream null)
	  (in null)
	  (out null))
      (try
       (begin
	 (set! inStream (new 'java.io.InputStreamReader
			     (new 'java.io.FileInputStream inFileName)))
	 (set! in (-si 'newLlavaReader 'org.llava.F inStream))
	 (set! out (new 'java.io.PrintWriter
			(new 'java.io.OutputStreamWriter
			     (new 'java.io.FileOutputStream outFileName))))
	 ((get-print-header fw) fw out inFileName outFileName)
	 (file-walker-streams fw in out)
	 ((get-print-footer fw) fw out inFileName outFileName))
       (finally
	(close inStream)
	(close out))))
    'done))

(define file-walker-streams
  (lambda (fw in out)
    (let ((savedOut (get-out fw)))
      (try
       (begin
	 (set-out! fw out)
	 (file-walker-streams-aux fw in))
       (finally
	(set-out! fw savedOut))))))

(define file-walker-streams-aux
  (lambda (fw in)
    (let ((sexpr (read in)))
      (cond ((not (eof-object? sexpr))
	     ((get-dispatcher fw) fw sexpr 0)
	     (file-walker-streams-aux fw in))))))

(define file-walker-indent
  (lambda (fw indent)
    (if (get-indent? fw)
	(dotimes (i indent) (file-walker-print fw " ")))))

(define file-walker-print
  (lambda (fw x)
    (print (get-out fw) x)))

(define file-walker-newline
  (lambda (fw)
    (if (get-newline? fw)
	(println (get-out fw)))))

;;; End of file.
