;;;; Copyright (c) 1997 - 2004 Harold Carr
;;;;
;;;; This work is licensed under the Creative Commons Attribution License.
;;;; To view a copy of this license, visit 
;;;;   http://creativecommons.org/licenses/by/2.0/
;;;; or send a letter to
;;;;   Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA
;;;;---------------------------------------------------------------------------

;;;;
;;;; Created       : 2001 Mar 06 (Tue) 15:09:50 by Harold Carr.
;;;; Last Modified : 2005 Feb 16 (Wed) 14:48:18 by Harold Carr.
;;;;

(package org.llava.lib.io.FileWalker)

(import org.llava.lib.Program)    ; define-with-setter, ...
(import org.llava.lib.cl.Control) ; dotimes
(import org.llava.lib.cl.Symbols) ; gensym

(-package-
 (description "Generic procedures to walk the contents of a file."))

;;;
;;; When using this package you need to set the dispatcher
;;; (and optionally the header/footer printers.
;;;

(define-with-setter (file-walker-dispatcher sexpr indent)
  (error "You must set-file-walker-dispatcher!"))
(define-with-setter (file-walker-print-header out inFileName outFilename)
  null)
(define-with-setter (file-walker-print-footer out inFileName outFilename)
  null)

;;;
;;; Control formatting.
;;;

(define-indirect-variable file-walker-out (-sf 'out 'java.lang.System))
(define-indirect-variable file-walker-newline? true)
(define-indirect-variable file-walker-indent? true)
(define-indirect-variable dprint? false)

(define file-walker-with-indent
  (lambda (lxml indent)
    (dprint 'file-walker-with-indent->)
    (try 
     (begin
      (for-each (lambda (sexpr) (file-walker-dispatcher sexpr indent))
		lxml)
      null)
     (finally
      (dprint 'file-walker-with-indent<-)))))

(define file-walker-string
  (lambda (lxml)
    (dprint 'file-walker-string->)
    (let* ((sw (new 'java.io.StringWriter))
	   (pw (new 'java.io.PrintWriter sw))
	   (savedOut (file-walker-out)))
      (try
       (begin
	 (file-walker-out pw)
	 (file-walker-with-indent lxml 0)
	 (toString sw))
       (finally
	(file-walker-out savedOut)
	(dprint 'file-walker-string<-))))))

;;;
;;; file-walker-files
;;;

(-doc-
 (name file-walker-files)
 (param input-filename)
 (param output-filename)
 (description "..."))

(define file-walker-files
  (lambda (inFileName outFileName)
    (let ((inStream null)
	  (in null)
	  (out null))
      (try
       (begin
	 (set! inStream (new 'java.io.InputStreamReader
			     (new 'java.io.FileInputStream inFileName)))
	 (set! in (-si 'newLlavaReader 'org.llava.impl.F inStream))
	 (set! out (new 'java.io.PrintWriter
			(new 'java.io.OutputStreamWriter
			     (new 'java.io.FileOutputStream outFileName))))
	 (file-walker-print-header out inFileName outFileName)
	 (file-walker-streams in out)
	 (file-walker-print-footer out inFileName outFileName))
       (catch (java.lang.Throwable t)
	      (throw t))
       (finally
	(close inStream)
	(close out))))
    'done))

(define file-walker-streams
  (lambda (in out)
    (dprint 'file-walker-streams->)
    (let ((savedOut (file-walker-out))
	  (EOF      (-si 'newLlavaEOF 'org.llava.impl.F)))
      (try
       (begin
	 (file-walker-out out)
	 (file-walker-streams-aux in EOF))
       (finally
	(file-walker-out savedOut)
	(dprint 'file-walker-streams<-))))))

(define file-walker-streams-aux
  (lambda (in EOF)
    (dprint 'file-walker-streams-aux->)
    (try
     (let ((sexpr (read in)))
       (cond ((not (equals EOF sexpr))
	      (file-walker-dispatcher sexpr 0)
	      (file-walker-streams-aux in EOF))))
     (finally
      (dprint 'file-walker-streams-aux<-)))))

(define file-walker-indent
  (lambda (indent)
    (if (file-walker-indent?)
	(dotimes (i indent) (file-walker-print " ")))))

(define file-walker-print
  (lambda (x)
    (dprint 'file-walker-print->)
    (print (file-walker-out) x)
    (dprint 'file-walker-print<-)))

(define file-walker-newline
  (lambda ()
    (if (file-walker-newline?)
	(println (file-walker-out)))))

(define dprint
  (lambda (msg) (if (dprint?) (-println msg))))


;;; End of file.
