;;;; Copyright (c) 1997 - 2004 Harold Carr
;;;;
;;;; This work is licensed under the Creative Commons Attribution License.
;;;; To view a copy of this license, visit 
;;;;   http://creativecommons.org/licenses/by/2.0/
;;;; or send a letter to
;;;;   Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA
;;;;---------------------------------------------------------------------------

;;;;
;;;; Created       : 1998 Dec 06 (Sun) 09:29:56 by Harold Carr.
;;;; Last Modified : 2004 Sep 09 (Thu) 21:14:02 by Harold Carr.
;;;;

(package org.llava.lib.Files)

(import org.llava.lib.cl.Control)

(-package- (description "Procedures for traversing directory trees."))

;;;
;;; for-each-dir
;;;

(-doc-
 (name for-each-dir)
 (param proc)
 (param file-or-string)
 (description
  "Given a procedure and directory name or file object.
   Applies the procedure to each file and directory in that directory.
   Recursively descends subdirectories.
   Stops if given procedure returns true.
   Given procedure should discriminate between files and directories."))

(define for-each-dir
  (lambda (proc dir)
    (call/cc
     (lambda (return)
       (let* ((contents
	       (listFiles 
		(cond ((instanceof dir 'java.io.File)		
		       dir)
		      ((instanceof dir 'java.lang.String)
		       (new 'java.io.File dir))
		      (else
		       (error "bad arg")))))
	      (len  (if (null? contents)
			0
			(-si 'getLength 'java.lang.reflect.Array contents)))
	      (current '()))
	 (dotimes (i len)
	   (set! current (-si 'get 'java.lang.reflect.Array contents i))
	   ;(-println (list 'current current))
	   ;(-println (list 'class (getClass current)))
	   (cond ((isDirectory current)
		  (if (proc current) (return #t))
		  (for-each-dir proc current))
		 ((isFile current)
		  (if (proc current) (return #t)))
		 (else
		  (-println (string-append "Unknown: " (toString current)))
		  (-println " ... skipping ...")))))))))

;;;
;;; for-each-file
;;;

(-doc-
 (name for-each-file)
 (param proc)
 (param file-or-string)
 (description
  "Given a procedure and directory name or file object.
   Applies the procedure to each file in that directory.
   Stops if given procedure returns true."))

(define for-each-file
  (lambda (proc dir)
    (call/cc
     (lambda (return)
       (let* ((contents
	       (listFiles 
		(cond ((instanceof dir 'java.io.File)		
		       dir)
		      ((instanceof dir 'java.lang.String)
		       (new 'java.io.File dir))
		      (else
		       (error "bad arg")))))
	      (len  (if (null? contents)
			0
			(-si 'getLength 'java.lang.reflect.Array contents)))
	      (current '()))
	 (dotimes (i len)
	   (set! current (-si 'get 'java.lang.reflect.Array contents i))
	   ;;(-println (list 'current current))
	   ;;(-println (list 'class (getClass current)))
	   (cond ((isDirectory current)
		  ;; ignore
		  null)
		 ((isFile current)
		  (if (proc current) (return #t)))
		 (else
		  (-println (string-append "Unknown: " (toString current)))
		  (-println " ... skipping ...")))))))))

(-comment-
(import org.llava.lib.Files)
(define (pf x) (-println (list 'YES x)) #f)
(for-each-dir pf ".")
(for-each-dir pf "/export/home/carr/.sync/.lsync/llava")
)

;;; End of file.
