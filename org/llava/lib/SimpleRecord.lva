;;;; Copyright (c) 1997 - 2004 Harold Carr
;;;;
;;;; This work is licensed under the Creative Commons Attribution License.
;;;; To view a copy of this license, visit 
;;;;   http://creativecommons.org/licenses/by/2.0/
;;;; or send a letter to
;;;;   Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA
;;;;---------------------------------------------------------------------------

;;;;
;;;; Created       : 2004 Nov 24 (Wed) 07:42:48 by Harold Carr.
;;;; Last Modified : 2004 Dec 14 (Tue) 10:50:29 by Harold Carr.
;;;;

(package org.llava.lib.SimpleRecord)

(-package- 
 (description "A very simple flat record with accessors and setters."))

;;;
;;; define-simple-record
;;;

(-doc-
 (name define-simple-record)
 (param record-name)
 (param slot-name)
 (param ...)
 (category syntax)
 (description
  "Defines a constructor: make-<record-name>.  Constructor takes 0 to
   N arguments, where N is the number of <slot-name>s.  For each
   argument it initializes the slot in that position or null if no
   corresponding argument."

  "For each <slot-name> it defines: get-<slot-name> and set-<slot-name>!"

  "The representation is a vector:  #(record <record-name> <slot-name> ...)"))

(define-syntax define-simple-record
  (lambda (record-name . slot-names)
    (let* ((N 1)
	   (positions 
	    (map (lambda (x) (set! N (+ N 1))) 
		 slot-names))
	   (setter-names 
	    (map (lambda (x) (string->symbol (s+ "set-" (toString x) "!")))
		 slot-names))
	   (setters 
	    (map (lambda (x n)
		   `(define ,x
		      (lambda (r v)
			(-si 'set 'java.lang.reflect.Array r ,n v)
			v)))
		 setter-names
		 positions))
	   (getters 
	    (map (lambda (x n)
		   `(define ,(string->symbol (s+ "get-" (toString x)))
		      (lambda (r)
			(-si 'get 'java.lang.reflect.Array r ,n))))
		 slot-names
		 positions))
	   (constructor
	    `(define ,(string->symbol (s+ "make-" (toString record-name)))
	       (lambda args
		 (do ((r (-si 'toArray 'org.llava.impl.util.List 
			      (cons 'record (cons ',record-name ',slot-names))))
		      (i 2 (+ i 1)) ;; 2 -> skip 'record and record-name
		      (len (+ 2 (length ',slot-names))))
		     ((>= i len) r)
		   (cond ((null? args)
			  (-si 'set 'java.lang.reflect.Array r i null))
			 (else
			  (-si 'set 'java.lang.reflect.Array r i (car args))
			  (set! args (cdr args)))))))))
      `(begin
	 ,constructor
	 ,@setters
	 ,@getters
	 ',record-name))))

;;; End of file.
