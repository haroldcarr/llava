;;;; Copyright (c) 1997 - 2004 Harold Carr
;;;;
;;;; This work is licensed under the Creative Commons Attribution License.
;;;; To view a copy of this license, visit 
;;;;   http://creativecommons.org/licenses/by/2.0/
;;;; or send a letter to
;;;;   Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA
;;;;---------------------------------------------------------------------------

;;;;
;;;; Created       : 2000 Oct 21 (Sat) 10:46:48 by Harold Carr.  
;;;; Last Modified : 2004 Dec 22 (Wed) 10:37:38 by Harold Carr.
;;;;

(-comment-
(begin
(package x.bottom)
(define bottom 
  (lambda (x) 
    (let ((x (+ x 1)))
      (list 'bottom x))))

(package x.top)
(import x.bottom)
;; If defined this way then bottom does not get found
;; because let expands to lambda which is created in the Repl package.
(define top 
  (lambda (x) 
    (let ((x (+ x 1)))
      (list 'top (bottom x)))))
;; If defined this way it works because no let/lambda creation.
(-comment-
(define top 
  (lambda (x) 
      (list 'top (bottom x))))
)

(package llava-) ;; REVISIT - get name from F.initialReplPackageName
(import x.top)
(top 1)
)
)

(import org.llava.lib.test.Test)

(define (doTest . args)
  (if (not (null? args))
      (load (car args)))
  (testNamespaceFoundation)
  (testNamespacePackage)
  (testNamespaceImport)
  (testNamespaceRefSet)
  (testNamespaceNew)
  )

(define (extractMessage throwable)
  (if (instanceof throwable 'org.llava.LlavaException)
      (getMessage (getThrowable throwable))
      (getMessage throwable)))

(define (initTest)
  (let* ((newLlava (new 'org.llava.Llava))
	 (newEnv  (getEnvironmentTopLevel newLlava)))

    (define (userHome) (-si 'getProperty 'java.lang.System "user.home"))

    ;; Use something different than the built-in namespace.
    ;; Just using repl for bootstrap - not because it is the replace package.
    (set! *X* (findNamespace newEnv (-si 'initialReplPackageName 'org.llava.F)))
    (setIsSealed (findNamespace newEnv (-si 'llavaPackageName 'org.llava.F)) false)
    (setUndefinedIdHandler newEnv (-si 'newUndefinedIdHandler 'org.llava.F))

    (set! *llavaPackageName* (-si 'llavaPackageName 'org.llava.F))
    (set! *replPackageName* (-si 'initialReplPackageName 'org.llava.F))
    (set! *testPackageName* "org.llava.lib.test.Test") ;; REVISIT name
    (set! *replNs* (eval `(package ,(-si 'newSymbol 'org.llava.F
				     (-si 'initialReplPackageName
					  'org.llava.F)))))
    ))

;;;;
;;;; Test foundation.
;;;;

(define (testNamespaceFoundation)

  (initTest)

  (begin-test 'testNamespaceFoundation)

  (check 1
	 (list *llavaPackageName*)
	 (getRefListNames (getRootNamespace *X*)))
  (check 1
	 (list *replPackageName* *llavaPackageName*)
	 (getFullNameNamespaceMapKeys *X*))
  
  (createNamespace *X* "foo.bar" (-f 'classVariables *X*))
  (check 2 
	 (list "foo.bar" *replPackageName* *llavaPackageName*)
	 (getFullNameNamespaceMapKeys *X*))
  
  (findOrCreateNamespace *X* "foo.bar")
  (check 3
	 (list "foo.bar" *replPackageName* *llavaPackageName*)
	 (getFullNameNamespaceMapKeys *X*))
  
  (check 4
	 (list "foo.bar" *llavaPackageName*)
	 (getRefListNames (findNamespace *X* "foo.bar")))
  
  (findOrCreateNamespace *X* "bar.baz")
  (check 5
	 (list "bar.baz" "foo.bar" *replPackageName* *llavaPackageName*)
	 (getFullNameNamespaceMapKeys *X*))
  
  (check 6
	 (list "bar.baz" *llavaPackageName*)
	 (getRefListNames (findOrCreateNamespace *X* "bar.baz")))
  
  (end-test 'testNamespaceFoundation))

;-------------------------

;;;;
;;;; Test "package".
;;;;

(define (testNamespacePackage)

  (initTest)

  (begin-test 'testNamespacePackage)

  (check 1
	 (list *replPackageName* *llavaPackageName*)
	 (getRefListNames (getCurrentNamespace *X*)))
  
  (_package *X* 'foo.bar)
  (check 2 (list "foo.bar" *replPackageName* *llavaPackageName*)
	 (getFullNameNamespaceMapKeys *X*))
  (check 3 (list "foo.bar" *llavaPackageName*)
	 (getRefListNames (getCurrentNamespace *X*)))
  
  (_package *X* 'foo.bar)
  (check 2 (list "foo.bar" *replPackageName* *llavaPackageName*)
	 (getFullNameNamespaceMapKeys *X*))
  (check 3 (list "foo.bar" *llavaPackageName*)
	 (getRefListNames (getCurrentNamespace *X*)))
  
  (_package *X* 'foo.baz)
  (check 2 (list "foo.bar" "foo.baz" *replPackageName* *llavaPackageName*)
	 (getFullNameNamespaceMapKeys *X*))
  (check 2  (list "foo.baz" *llavaPackageName*)
	 (getRefListNames (getCurrentNamespace *X*)))
  
  (_package *X* 'buz.saw)
  (check 2 (list "buz.saw" "foo.bar" "foo.baz" *replPackageName* *llavaPackageName*)
	 (getFullNameNamespaceMapKeys *X*))
  
  (check 1
	 (list "buz.saw" *llavaPackageName*)
	 (getRefListNames (getCurrentNamespace *X*)))
  
  (_package *X* '.Only)
  (check 1 (list ".Only" "buz.saw" "foo.bar" "foo.baz" *replPackageName* *llavaPackageName*)
	 (getFullNameNamespaceMapKeys *X*))
  (check 1
	 (list ".Only" *llavaPackageName*)
	 (getRefListNames (getCurrentNamespace *X*)))
  
  (end-test 'testNamespacePackage))

;-------------------------

;;;;
;;;; Test "import".
;;;;

(define (testNamespaceImport)

  (initTest)

  (begin-test 'testNamespaceImport)

  (check 1 (list  *replPackageName* *llavaPackageName* *testPackageName*)
	 (getFullNameNamespaceMapKeys *replNs*))
  (check 2 (list *replPackageName* *testPackageName* *llavaPackageName*) 
	 (getRefListNames (getCurrentNamespace *replNs*)))

  (check 1 (string-append "(re)load: " (userHome)
			  "/.sync/.llava.org/.system/test/testNamespace/one/OneI.lva")
	 (import test.testNamespace.one.OneI))
  (check 2 (string-append "no change: " (userHome) 
			  "/.sync/.llava.org/.system/test/testNamespace/one/OneI.lva")
	 (import test.testNamespace.one.OneI))
  (check 3 (list  *replPackageName* *llavaPackageName* *testPackageName*
	     "test.testNamespace.one.OneI" "test.testNamespace.two.TwoI")
	 (getFullNameNamespaceMapKeys *replNs*))
  (check 4
	 (list *replPackageName* *testPackageName* "test.testNamespace.one.OneI" *llavaPackageName*)
	 (getRefListNames (getCurrentNamespace *replNs*)))
  (check 5
	 (list "test.testNamespace.one.OneI" "test.testNamespace.two.TwoI" *llavaPackageName*)
	 (getRefListNames (findNamespace *replNs* "test.testNamespace.one.OneI")))
  (check 6
	 (list "test.testNamespace.two.TwoI" *llavaPackageName*)
	 (getRefListNames (findNamespace *replNs* "test.testNamespace.two.TwoI")))

  (check 6 (string-append "no change: " (userHome) 
			  "/.sync/.llava.org/.system/test/testNamespace/two/TwoI.lva")
	 (import test.testNamespace.two.TwoI))
  (check 6 (list *replPackageName* *llavaPackageName* *testPackageName*
	     "test.testNamespace.one.OneI" "test.testNamespace.two.TwoI")
	 (getFullNameNamespaceMapKeys *replNs*))
  (check 7 (list *replPackageName* *testPackageName* "test.testNamespace.one.OneI"
	     "test.testNamespace.two.TwoI" *llavaPackageName*)
	 (getRefListNames (getCurrentNamespace *replNs*)))

  (check 6 (string-append "no change: " (userHome)
			  "/.sync/.llava.org/.system/test/testNamespace/two/TwoI.lva")
	 (import test.testNamespace.two.TwoI))
  (check 8 (list *replPackageName* *testPackageName* "test.testNamespace.one.OneI"
	     "test.testNamespace.two.TwoI" *llavaPackageName*)
	 (getRefListNames (getCurrentNamespace *replNs*)))

  (check 9 "class java.util.StringTokenizer"
	 (import java.util.StringTokenizer))

  (check 9 "already loaded: class java.util.StringTokenizer"
	 (import java.util.StringTokenizer))

  (end-test 'testNamespaceImport))

;-------------------------

;;;;
;;;; Test ref/set
;;;;

(define (testNamespaceRefSet)

  (initTest)

  (begin-test 'testNamespaceRefSet)

  (set! *X* (_package *X* 'org.llava))
  (check 0.0 (list *llavaPackageName*)
	 (getRefListNames (getCurrentNamespace *X*)))
  (set *X* 'a 'Llava-a)
  (check 0.1 'Llava-a (get *X* 'a))
  (check 0.2 'Llava-a (get *X* '.a))
  (check 0.3 'Llava-a (get *X* 'llava.a))
  (check 0.4 'Llava-a (get *X* 'org.llava.a))

  (set! *X* (_package *X* (-si 'newSymbol 'org.llava.F *replPackageName*)))
  (check 0.5 *replPackageName* (getName (getCurrentNamespace *X*)))
  (check 0.6 (list *replPackageName* *llavaPackageName*) 
	 (getRefListNames (getCurrentNamespace *X*)))
  (check 0.7 'Llava-a (get *X* 'a))
  (check 1.0 'REPL-a (set *X* 'a 'REPL-a))
  (check 2.1 'REPL-a (get *X* 'a))
  (check 2.2 'Llava-a (get *X* '.a))
  (check 2.3 'Llava-a (get *X* 'llava.a))
  (check 2.4 'REPL-a (get *X* 'llava-.a))
  (check 2.5 'Llava-a (get *X* 'llava.a))
  (check 2.6 'REPL-a (get *X* 'llava-.a))
  (check 2.7 'Llava-a (get *X* 'org.llava.a))

  (set! *X* (_package *X* 'foo.bar.Baz))
  (check 3 (list "foo.bar.Baz" *llavaPackageName*)
	 (getRefListNames (getCurrentNamespace *X*)))
  (check 3 'Llava-a (get *X* 'a))
  (set *X* 'a 'Baz-a)
  (check 2 'Baz-a (get *X* 'a))
  (check 2 'Baz-a (get *X* 'Baz.a))
  (check 2 'Llava-a (get *X* '.a))
  (check 2 'Llava-a (get *X* 'llava.a))
  (check 2 'Baz-a (get *X* 'foo.bar.Baz.a))
  (check 2 'Llava-a (get *X* 'org.llava.a))
  (check 2
	 "Undefined top level variable: repl.a"
	 (try (get *X* 'repl.a) 
	      (catch (java.lang.Throwable e) (extractMessage e))))
  ;; It is ok to reference long names from any package.
  ;; Necessary for macros to work between packages.
  (check 2 'REPL-a (get *X* 'llava-.a))

  (set! *X* (_package *X* 'test.testNamespace.one.One))
  (check 4 "test.testNamespace.one.One" (getName (getCurrentNamespace *X*)))
  (check 4 'Llava-a (get *X* 'a))
  (check 4 'Llava-a (get *X* '.a))
  (set *X* 'a 'One-a)

  (set! *X* (_package *X* 'foo.bar.Baz))
  (check 4 "foo.bar.Baz" (getName (getCurrentNamespace *X*)))
  (check 3
	 (list "foo.bar.Baz" *llavaPackageName*)
	 (getRefListNames (getCurrentNamespace *X*)))
  (check 0 'Baz-a (get *X* 'a))
  (check 0 'Llava-a (get *X* '.a))
  (check 4 'Baz-a (get *X* 'a))
  (check 0 'One-a (get *X* 'test.testNamespace.one.One.a))
  (check 0 'Llava-a (get *X* 'org.llava.a))
  (check 0 'One-a (get *X* 'test.testNamespace.one.One.a))

  (set! *X* (_package *X* 'org.llava))
  (check 0 (list *llavaPackageName*)
	 (getRefListNames (getCurrentNamespace *X*)))
  (check 0 'Llava-a (get *X* 'a))
  (check 0 'Llava-a (get *X* '.a))
  (check 0 'Llava-a (get *X* 'org.llava.a))
  (check 2
	 "Undefined top level variable: One.a"
	 (try (get *X* 'One.a) 
	      (catch (java.lang.Throwable e) (extractMessage e))))
  (check 2 'One-a (get *X* 'test.testNamespace.one.One.a))

  (set! *X* (_package *X* '.Only))
  (set *X* 'a 'Only-a)
  (check 0 'Only-a (get *X* 'a))
  (check 0 'Only-a (get *X* 'Only.a))
  (check 0 'Llava-a (get *X* '.a))

  (end-test 'testNamespaceRefSet))

;-------------------------

;;;;
;;;; Test new.
;;;;

(define (testNamespaceNew)

  (initTest)

  (begin-test 'testNamespaceNew)

  (check 0 "java.util.Hashtable" 
	 (getFullNameForClass *replNs* 'java.util.Hashtable))
  (check 1 "getFullNameForClass: undefined: Hashtable"
	 (try (getFullNameForClass *replNs* 'Hashtable)
	      (catch (java.lang.Throwable e) (extractMessage e))))
  (import java.util.Hashtable)
  (check 3 "java.util.Hashtable" (getFullNameForClass *replNs* 'Hashtable))
  
  (end-test 'testNamespaceNew))

;;;;
;;;; Test library.
;;;;

(define (testNamespaceLibrary)

  ;; This one cannot use the test procedures since they are written
  ;; with require and do not exist when we switch packages.

  (package test.testing.one.two)
  
  (import org.llava.lib.cl.Control)
  (set! temp 0)
  (dotimes (i 4) (set! temp (+ temp i)))
  ;; REVISIT - cannot use check in different package.
  (if (not (= temp 6)) 
      (-println 'BAD))

  (if (not (equals "Undefined top level variable: gensym"
		   (try (gensym)
			(catch (java.lang.Throwable e) 
			       (getMessage e)))))
      (-println 'BAD))
  (if (not (symbol? (org.llava.lib.cl.Symbols.gensym)))
      (-println 'BAD))

  (define (dotimes a) a)
  (if (not (= (dotimes 4) 4))
      (-println 'BAD))
  (package org.llava.lib.cl.Control)
  (set! temp 0)
  (dotimes (i 4) (set! temp (+ temp i)))
  (if (not (= temp 6)) 
      (-println 'BAD))
  (if (not (symbol? (gensym)))
      (-println 'BAD))

)

;;;;
;;;; do the test when loaded.
;;;;

(-comment-
(load "testNamespaceInternal.lva")
)

(doTest)

;;; End of file.
