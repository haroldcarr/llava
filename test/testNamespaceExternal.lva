;;;; Copyright (c) 1997 - 2004 Harold Carr
;;;;
;;;; This work is licensed under the Creative Commons Attribution License.
;;;; To view a copy of this license, visit 
;;;;   http://creativecommons.org/licenses/by/2.0/
;;;; or send a letter to
;;;;   Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA
;;;;---------------------------------------------------------------------------

;;;;
;;;; Created       : 2000 Oct 21 (Sat) 10:46:48 by Harold Carr.  
;;;; Last Modified : 2004 Dec 08 (Wed) 10:27:14 by Harold Carr.
;;;;

;;; NOTE: This is the original external test which used to work both
;;; externally and internally.  Now it doesn't work with the package
;;; system integrated.  

;;; TODO: Rework it to work regardless of what env is plugged into Llava.

(-comment-

(load "testNamespace.lva")
(doTest "testNamespace.lva")

(load "test/testNamespace.lva")
(doTest "test/testNamespace.lva")

(importX 'testNamespace.one.One)

;; built-in
(min 5 2 8)
(max 5 2 8)
(import testNamespace.one.OneI)
(min 5 2 8)
(max 5 2 8)
(package testNamespace.two TwoI)
(min 5 2 8)
(max 5 2 8)
(package llava Llava)
(min 5 2 8)
(max 5 2 8)

(require 'java/lang/import)
(import java.util.Hashtable)
(import java.lang.Float)
(valueOf "45.5")
(parseFloat "45.5")
)

(require 'test/test)

(define packageX 
  (lambda (p c)
    (_package *ns* p c)))

(define importX
  (lambda (name)
    (_import *ns* name)))

(define setE!
  (lambda (var val)
    (set *ns* var val)))

(define refE
  (lambda (var)
    (get *ns* var)))

;; Do not really do it.
(define _%importAux (lambda args (-println (cons '_%importAux args))))

(define (initTest)

  (let* ((evaluator   (-si 'newEvaluator 'org.llava.F))
	 (compiler    (-si 'newCompiler  'org.llava.F))
	 (environment (newEnvironmentTopLevel
		       (new 'org.llava.impl.runtime.NamespaceImpl)))
	 (runtime     (-si 'newLlavaRuntime 'org.llava.F 
			   environment evaluator))
	 (err         (new 'java.io.PrintWriter  (-sf 'err 'java.lang.System)))
	 (repl        (-si 'newRepl 'org.llava.F
			   (-si 'newLlavaReader 'org.llava.F
				(new 'java.io.InputStreamReader
				     (-sf 'in 'java.lang.System)))
			   (new 'java.io.PrintWriter 
				(-sf 'out 'java.lang.System))
			   err
			   runtime
			   compiler))
	 (tlInit      (-si 'newEnvTopLevelInit 'org.llava.F repl)))

    (init tlInit)
    (loadDerived tlInit)
    (setUndefinedIdHandler environment
			   (-si 'newUndefinedIdHandler 'org.llava.F))

    (define *ns* environment)
		
    (setE! 'packageX packageX)
    (setE! 'importX importX)
    (setE! 'setE! setE!)
    (setE! 'refE refE)
    (setE! '_%importAux _%importAux)

    (let ((replNs (createNamespace *ns* "llava.REPL" 
				   (-f 'classVariables *ns*))))
      (setCurrentNamespace *ns* replNs))

    (define (userHome) (-si 'getProperty 'java.lang.System "user.home"))

    *ns*))

(define (extractMessage throwable)
  (if (instanceof throwable 'org.llava.LlavaException)
      (getMessage (getThrowable throwable))
      (getMessage throwable)))

(define (doTest . args)
  (if (not (null? args))
      (load (car args)))
  (testNamespaceFoundation)
  (testNamespacePackage)
  (testNamespaceImport)
  (testNamespaceRefSet)
  (testNamespaceNew)
  )

;;;;
;;;; Test foundation.
;;;;

(define (testNamespaceFoundation)

  (initTest)

  (begin-test)

  (check 1
	 '("llava.Llava")
	 (getRefListNames (getRootNamespace *ns*)))
  (check 1
	 '("llava.Llava" "llava.REPL")
	 (getFullNameNamespaceMapKeys *ns*))
  
  (createNamespace *ns* "foo.bar" (-f 'classVariables *ns*))
  (check 2 
	 '("foo.bar" "llava.Llava" "llava.REPL")
	 (getFullNameNamespaceMapKeys *ns*))
  
  (findOrCreateNamespace *ns* "foo.bar")
  (check 3
	 '("foo.bar" "llava.Llava" "llava.REPL")
	 (getFullNameNamespaceMapKeys *ns*))
  
  (check 4
	 '("foo.bar" "llava.Llava")
	 (getRefListNames (findNamespace *ns* "foo.bar")))
  
  (findOrCreateNamespace *ns* "bar.baz")
  (check 5
	 '("bar.baz" "foo.bar" "llava.Llava" "llava.REPL")
	 (getFullNameNamespaceMapKeys *ns*))
  
  (check 6
	 '("bar.baz" "llava.Llava")
	 (getRefListNames (findOrCreateNamespace *ns* "bar.baz")))
  
  (end-test 'testNamespaceFoundation))

;-------------------------

;;;;
;;;; Test "package".
;;;;

(define (testNamespacePackage)

  (initTest)

  (begin-test)

  (check 1
	 '("llava.REPL" "llava.Llava")
	 (getRefListNames (getCurrentNamespace *ns*)))
  
  (packageX 'foo 'bar)
  (check 2 '("foo.bar" "llava.Llava" "llava.REPL")
	 (getFullNameNamespaceMapKeys *ns*))
  (check 3 '("foo.bar" "llava.Llava")
	 (getRefListNames (getCurrentNamespace *ns*)))
  
  (packageX 'foo 'bar)
  (check 2 '("foo.bar" "llava.Llava" "llava.REPL")
	 (getFullNameNamespaceMapKeys *ns*))
  (check 3 '("foo.bar" "llava.Llava")
	 (getRefListNames (getCurrentNamespace *ns*)))
  
  (packageX 'foo 'baz)
  (check 2 '("foo.bar" "foo.baz" "llava.Llava" "llava.REPL")
	 (getFullNameNamespaceMapKeys *ns*))
  (check 2  '("foo.baz" "llava.Llava")
	 (getRefListNames (getCurrentNamespace *ns*)))
  
  (packageX 'buz 'saw)
  (check 2 '("buz.saw" "foo.bar" "foo.baz" "llava.Llava" "llava.REPL")
	 (getFullNameNamespaceMapKeys *ns*))
  
  (check 1
	 '("buz.saw" "llava.Llava")
	 (getRefListNames (getCurrentNamespace *ns*)))
  
  (packageX (string->symbol "") 'Only)
  (check 1 '(".Only" "buz.saw" "foo.bar" "foo.baz" "llava.Llava" "llava.REPL")
	 (getFullNameNamespaceMapKeys *ns*))
  (check 1
	 '(".Only" "llava.Llava")
	 (getRefListNames (getCurrentNamespace *ns*)))
  
  (end-test 'testNamespacePackage))

;-------------------------

;;;;
;;;; Test "import".
;;;;

(define (testNamespaceImport)

  (initTest)

  (begin-test)

  (check 1 '("llava.Llava" "llava.REPL") (getFullNameNamespaceMapKeys *ns*))
  (check 2 '("llava.REPL" "llava.Llava") 
	 (getRefListNames (getCurrentNamespace *ns*)))

  (check 1 (string-append "(re)load: " (userHome)
			  "/.sync/.llava.org/.system/test/testNamespace/one/One.lva")
	 (importX 'testNamespace.one.One))
  (check 2 (string-append "no change: " (userHome) 
			  "/.sync/.llava.org/.system/test/testNamespace/one/One.lva")
	 (importX 'testNamespace.one.One))
  (check 3 '("llava.Llava" "llava.REPL"
	     "testNamespace.one.One" "testNamespace.two.Two")
	 (getFullNameNamespaceMapKeys *ns*))
  (check 4
	 '("llava.REPL" "testNamespace.one.One" "llava.Llava")
	 (getRefListNames (getCurrentNamespace *ns*)))
  (check 5
	 '("testNamespace.one.One" "testNamespace.two.Two" "llava.Llava")
	 (getRefListNames (findNamespace *ns* "testNamespace.one.One")))
  (check 6
	 '("testNamespace.two.Two" "llava.Llava")
	 (getRefListNames (findNamespace *ns* "testNamespace.two.Two")))

  (check 6 (string-append "no change: " (userHome) 
			  "/.sync/.llava.org/.system/test/testNamespace/two/Two.lva")
	 (importX 'testNamespace.two.Two))
  (check 6 '("llava.Llava" "llava.REPL"
	     "testNamespace.one.One" "testNamespace.two.Two")
	 (getFullNameNamespaceMapKeys *ns*))
  (check 7 '("llava.REPL" "testNamespace.one.One"
	     "testNamespace.two.Two" "llava.Llava")
	 (getRefListNames (getCurrentNamespace *ns*)))

  (check 6 (string-append "no change: " (userHome)
			  "/.sync/.llava.org/.system/test/testNamespace/two/Two.lva")
	 (importX 'testNamespace.two.Two))
  (check 8 '("llava.REPL" "testNamespace.one.One"
	     "testNamespace.two.Two" "llava.Llava")
	 (getRefListNames (getCurrentNamespace *ns*)))

  (check 9 "class java.util.Hashtable"
	 (importX 'java.util.Hashtable))

  (check 9 "already loaded: class java.util.Hashtable"
	 (importX 'java.util.Hashtable))

  (end-test 'testNamespaceImport))

;-------------------------

;;;;
;;;; Test ref/set
;;;;

(define (testNamespaceRefSet)

  (initTest)

  (begin-test)

  (packageX 'llava 'Llava)
  (check 0 '("llava.Llava") (getRefListNames (getCurrentNamespace *ns*)))
  (setE! 'a 'Llava-a)
  (check 0 'Llava-a (refE 'a))
  (check 0 'Llava-a (refE '.a))
  (check 0 'Llava-a (refE 'Llava.a))
  (check 0 'Llava-a (refE 'llava.Llava.a))

  (packageX 'llava 'REPL)
  (check 0 "llava.REPL" (getName (getCurrentNamespace *ns*)))
  (check 0 '("llava.REPL" "llava.Llava") 
	 (getRefListNames (getCurrentNamespace *ns*)))
  (check 0 'Llava-a (refE 'a))
  (check 1 'REPL-a (setE! 'a 'REPL-a))
  (check 2 'REPL-a (refE 'a))
  (check 2 'Llava-a (refE '.a))
  (check 2 'Llava-a (refE 'Llava.a))
  (check 2 'REPL-a (refE 'REPL.a))
  (check 2 'Llava-a (refE 'Llava.a))
  (check 2 'REPL-a (refE 'llava.REPL.a))
  (check 2 'Llava-a (refE 'llava.Llava.a))

  (packageX 'foo.bar 'Baz)
  (check 3 '("foo.bar.Baz" "llava.Llava")
	 (getRefListNames (getCurrentNamespace *ns*)))
  (check 3 'Llava-a (refE 'a))
  (setE! 'a 'Baz-a)
  (check 2 'Baz-a (refE 'a))
  (check 2 'Baz-a (refE 'Baz.a))
  (check 2 'Llava-a (refE '.a))
  (check 2 'Llava-a (refE 'Llava.a))
  (check 2 'Baz-a (refE 'foo.bar.Baz.a))
  (check 2 'Llava-a (refE 'llava.Llava.a))
  (check 2
	 "Undefined top level variable: REPL.a"
	 (try (refE 'REPL.a) 
	      (catch (java.lang.Throwable e) (extractMessage e))))
  (check 2
	 "Undefined top level variable: llava.REPL.a"
	 (try (refE 'llava.REPL.a) 
	      (catch (java.lang.Throwable e) (extractMessage e))))

  (importX 'testNamespace.one.One)
  (check 3
	 '("foo.bar.Baz" "testNamespace.one.One" "llava.Llava")
	 (getRefListNames (getCurrentNamespace *ns*)))
  (check 4 'Baz-a (refE 'a))
  (check 4 'Llava-a (refE 'Llava.a))
  (check 4 'Llava-a (refE '.a))

  (packageX 'testNamespace.one 'One)
  (check 4 "testNamespace.one.One" (getName (getCurrentNamespace *ns*)))
  (check 4 'Llava-a (refE 'a))
  (check 4 'Llava-a (refE '.a))
  (setE! 'a 'One-a)

  (packageX 'foo.bar 'Baz)
  (check 4 "foo.bar.Baz" (getName (getCurrentNamespace *ns*)))
  (check 3
	 '("foo.bar.Baz" "testNamespace.one.One" "llava.Llava")
	 (getRefListNames (getCurrentNamespace *ns*)))
  (check 0 'Baz-a (refE 'a))
  (check 0 'Llava-a (refE '.a))
  (check 4 'Baz-a (refE 'a))
  (check 0 'One-a (refE 'One.a))
  (check 0 'Llava-a (refE 'Llava.a))
  (check 0 'One-a (refE 'testNamespace.one.One.a))

  (packageX 'llava 'Llava)
  (check 0 '("llava.Llava") (getRefListNames (getCurrentNamespace *ns*)))
  (check 0 'Llava-a (refE 'a))
  (check 0 'Llava-a (refE '.a))
  (check 0 'Llava-a (refE 'llava.Llava.a))
  (check 2
	 "Undefined top level variable: One.a"
	 (try (refE 'One.a) 
	      (catch (java.lang.Throwable e) (extractMessage e))))
  (check 2
	 "Undefined top level variable: testNamespace.one.One.a"
	 (try (refE 'testNamespace.one.One.a) 
	      (catch (java.lang.Throwable e) (extractMessage e))))

  (packageX (string->symbol "") 'Only)
  (setE! 'a 'Only-a)
  (check 0 'Only-a (refE 'a))
  (check 0 'Only-a (refE 'Only.a))
  ;;(check 0 'Llava-a (refE '.a))

  (end-test 'testNamespaceRefSet))

;-------------------------

;;;;
;;;; Test new.
;;;;

(define (testNamespaceNew)

  (initTest)

  (begin-test)

  (check 0 "java.util.Hashtable" 
	 (getFullNameForClass *ns* 'java.util.Hashtable))
  (check 1 "getFullNameForClass: undefined: Hashtable"
	 (try (getFullNameForClass *ns* 'Hashtable)
	      (catch (java.lang.Throwable e) (extractMessage e))))
  (importX 'java.util.Hashtable)
  (check 3 "java.util.Hashtable" (getFullNameForClass *ns* 'Hashtable))
  
  (end-test 'testNamespaceNew))

;;;;
;;;; do the test when loaded.
;;;;

(doTest)

;;; End of file.
